zip instantclient installations omit libclntsh.so link, it is required for compile to work

convert dtd to xml schema

doc for how to use SQL Relay with joomla


blackray supports postgresql protocol, I might be able to grab some code from
	it to implement the same

sqlite supports virtual tables implemented via modules
	create module for each DB type using database connection classes
	use this and :memory: filename to achieve cross-db joins
	create module for xbase tables to use SQL on those
	create module for csv's
	lots of possibilities


Cameron/Kyler Laird reported issues when the column count is the same as the
optimistic column count

support old oracle long datatype like a lob

suspended session increments serversockincount but then it doesn't get
	decremented, even after session is resumed
	the socket may not be getting deleted or something
	closeConnection is crashing trying to delete those sockets

db2 - yes
firebird - yes
freetds - if a query fails, next one gets: no server side cursors available...
		all cursors end up having the same ID, one higher than the
		actual max cursor count
		does this happen with other connections?
mysql - yes
oracle8 - yes
oracle8i - I don't get a crash any more, but it's flaky now, sometimes
		bind cursors don't return any data, like the statement doesn't
		have the result set associated with it any more
		the colums still are there, but not the results set itself
		connections get hung when running test over and over
postgresql7 - yes
postgresql8 - yes
sqlite - connections get hung when running test over and over
		sqlr-stop doesn't always kill
sybase - connections get hung when test script fails
		sqlr-stop doesn't always kill

various cases where connection daemons won't shut down

there are cases with DB2 where data in a DB that's not using UTF-8 may be
returned converted to UTF-8.  How do we get the data out in the same encoding
that it's in the DB in?
http://www.ibm.com/developerworks/data/library/techarticle/dm-0506chong/index.html

addresses="" causes the listener not to start, but addresses="0.0.0.0" or
leaving the entire addresses element out works as expected

java api crashes on 64 bit because GetIntField needs to be GetLongField on
	that platform


The PHP Pear DB driver doesn't handle ? chars properly inside double quotes.
I think it probably also doesn't handle escaped quotes properly either.

installing under lib/python/Products in zope 2 doesn't work
zope 3 doesn't have lib/python/Products

postgresql drop-in doesn't work with modern postgresql

Hard problem:
	oracle apparently runs out of cursors after a while, the problem isn't
	present in 0.39.4 but is present in all 0.4x versions and CVS:
	http://sourceforge.net/mailarchive/forum.php?thread_name=1235577052.49a568dce0015%40imp.free.fr&forum_name=sqlrelay-discussion

	illustrates the problem:

create or replace PACKAGE testrelay_proc AS
TYPE ref_cursor IS REF CURSOR;
PROCEDURE testrelay (
PI$SITE_ID IN NUMBER
, C_CURSOR OUT ref_cursor
, PI$ERROR OUT integer);

PROCEDURE testrelay2 (
PI$SITE_ID IN NUMBER
, PI$ERROR OUT integer);
END testrelay_proc;

create or replace PACKAGE BODY testrelay_proc AS
PROCEDURE testrelay(
PI$SITE_ID IN NUMBER
, C_CURSOR OUT ref_cursor
, PI$ERROR OUT integer) AS
BEGIN
PI$ERROR := -20999;
OPEN C_CURSOR FOR
SELECT NAME FROM xxxxxxxxx WHERE ID=PI$SITE_ID;
PI$ERROR := 0;
EXCEPTION
WHEN OTHERS THEN
IF C_CURSOR%ISOPEN THEN
CLOSE C_CURSOR;
END IF;
PI$ERROR := sqlcode;
END testrelay;

PROCEDURE testrelay2 (
PI$SITE_ID IN NUMBER
, PI$ERROR OUT integer) AS
BEGIN
PI$ERROR := -20999;
PI$ERROR := 2;
END testrelay2;
END testrelay_proc;



create or replace FUNCTION testrelay4 (
PI$SITE_ID IN NUMBER
) RETURN number as

LN$NAME number;
BEGIN
SELECT 155 into LN$NAME FROM xxxxxxxxx ID=PI$SITE_ID AND rownum < 2;
return LN$NAME;
end testrelay4;


<?php
$con=sqlrcon_alloc("IP_sqlrelay",PORT,"","USER","PASS",1,3);
$cur=sqlrcur_alloc($con);

echo "testrelay1 <br>";
$query1 = 'select system.testrelay4(10) from dual';
sqlrcur_sendQuery($cur, $query1);

echo sqlrcur_getField($cur,0,0); // returns 1 row 1 col.
//Always return 155 (work fine in every case evry time)

echo "<br>testrelay2 <br>";
$query3 = 'BEGIN system.testrelay_proc.testrelay2(:SITE_ID,
:ERROR_BIND);END;';
sqlrcur_prepareQuery($cur,$query3);
sqlrcur_inputBind($cur,'SITE_ID', 10);
sqlrcur_defineOutputBindInteger($cur,'ERROR_BIND');
$resultquery = sqlrcur_executeQuery($cur);
$bindcurError = sqlrcur_getOutputBindInteger($cur,'ERROR_BIND');
var_dump($bindcurError);
// Always return int 2 (work fine in every case)

echo "testrelay3 - The Real Problem";
$query = 'BEGIN system.testrelay_proc.testrelay(:SITE_ID,
:CURSOR_BIND, :ERROR_BIND);END;';
sqlrcur_prepareQuery($cur,$query);
sqlrcur_inputBind($cur,'SITE_ID', 10);

sqlrcur_defineOutputBindCursor($cur,'CURSOR_BIND');

sqlrcur_defineOutputBindInteger($cur,'ERROR_BIND');
$resultquery = sqlrcur_executeQuery($cur);
$bindcur =
sqlrcur_getOutputBindCursor($cur,'CURSOR_BIND');
$bindcurError =
sqlrcur_getOutputBindInteger($cur,'ERROR_BIND');

//Fetching from output cursor
sqlrcur_fetchFromBindCursor($bindcur);
$iNbFirstResult = sqlrcur_rowCount($bindcur);
$return['NbResult'] =
$iNbFirstResult;


for ($i=0; $i<sqlrcur_rowCount($bindcur); $i++) {
for ($j=0; $j<sqlrcur_colCount($bindcur); $j++)
{
$return[$i][sqlrcur_getColumnName($bindcur,$j)] =
sqlrcur_getField($bindcur,$i,$j);

}

}

var_dump($return);
// work after sqlrelay restart for number of available connections -
but failed after : return array 'NbResult' => int 0

// Clean cursors, connexions ...
sqlrcon_endSession($con);
sqlrcur_free($bindcur);
sqlrcur_free($cur);
sqlrcon_free($con);
?>


Zope API:
	doesn't handle money types right
	ImageFile needs to be App.ImageFile in zope 2.11 and up
	meta_types, __ac_permissions_- and methods attributes are long
		deprecated

ODBC requires numbers rather than names for bind variables,
* make sure ODBC docs say that you have to use numbers for bind variables
	or
* dig through the query and map names to numbers

PHP with postgresql drop-in needs lots of functions

1.0:

Bugs:
	* allowing query timeout appears to hang the sqlrelay server
		need to add timeout option to sqlrsh
	* PHP pear db only returns 100 rows with this code:
		$query = "SELECT id, name FROM ct_contest ORDER BY name ASC;";
        		$db->setFetchMode(DB_FETCHMODE_ASSOC);
        		$result = $db->query($query);
                		while ($line = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
                 		print ("\t<option value=\"$line[id]\" $selected>$line[name]</option>\n");
                		print "$line[name]\n";
        		}
        		$result->free();
	* connection daemons have some issue with detaching (I think)
	* just because sqlrelay is compiled against unixodbc which supports
		odbc 3.0 api, individual drivers may not support the 3.0 api,
		so sqlrelay needs to detect this or it needs to at least be
		configurable
		use SQLGetInfo with SQL_ODBC_API_CONFORMANCE, can return:
			SQL_OAC_NONE
			SQL_OAC_LEVEL1
			SQL_OAC_LEVEL2
	* query router "do something"'s
	* SID may not be necessary, binds and escaping can prevent SQL
		injection, verify that they are sufficient in SQL Relay and put
		docs in the FAQ.
		See http://en.wikipedia.org/wiki/SQL_injection
	* get sid working, document or remove it
	* SID how to:
		create db
		create user
		mysql -usiddb -psiddb siddb < siddb
		set up sqlrelay instance to talk to it
		set up another instance to use siddb instance for sid
		populate siddb
		sidparameters:
			sparam=INGRESS - perform ingress filtering
				EGRESS - perform egress filtering
				LISTEN - ???
				VERIFICATION - don't send queries to db
				PREVENTION - send queries to db if ok
			svalue=1/0

		sidingressblist - ingress blacklist
			sql_state - queries to reject
		sidingresswlist - ingress whitelist
			sql_state - queries to accept,
					overrides blacklist
		sidingressldb - ingress learning database
			parsed_sql - ???

		sidegressblist - egress blacklist
			sql_state - "parsed results" to reject
		sidegresswlist - egress whitelist
			sql_state - "parsed results" to accept
					overrides blacklist
		sidegressldb - egress learning database
			parsed_sql - ???
		what are "parsed results" - something to do with column names...
			sidlog - every query is logged here with a message
					about it
	* if a client connects and the forked listener ends up waiting for a
		connection and the client disconnects, the forked listener has
		no way of knowing that the client has disconnected and can't
		bail
	* semop's can return ENOSPC if the undo list is full which is unhandled
		and causes deadlocks in the sqlr-listeners.  If we get an
		ENOSPC, then we need to send the client an error and the
		sqlr-listener needs to exit.
	* Need to find a way to re-distribute connections.
		If 2 db's go down and 2nd comes back up first, all log into 2nd
		db and never log out and back into first

Tests:

Documentation:
	* db2 on fc9
	* how to use new features of Tony/Erik's perl dbi patch
	* getting started with odbc
	* "how sqlrelay works" with diagrams and animations
	* example sqlrelay.conf's for different configurations
	* performance benchmark charts

Performance/Code Enhancements:
	* reset autocommit state when new client logs into sqlrelay
	* NLS_LANG-like issues with other db's?

Features:
	* update python api to create decimals in dictionary
	* update python test to handle python patches
	* incorporate Jens Brey's instantclient patches
	* get odbc driver working better
	* get odbc driver working sufficiently to use with jdbc
	* Perl DBI driver needs to convert bind vars from ?'s to
		db-appropriate format like PHP Pear DB driver does
	* Non C/C++ api's need a method to close cursors.  Specifically, bind
		cursors cannot be closed manually and must be garbage collected.
		It's not an issue for memory, but rather a server-side cursor
		will be occupied until it's garbage collected.  On C/C++ you
		can just delete it.
	* return error code/number

Availability:

API's:
	* PHP PDO driver  http://wiki.cc/php/PDO

--------------------------------------------------------------------------------

Post 1.0:

Bugs:

Tests:
	* php pear db bind formats
	* db2 temp tables
	* odbc temp tables
	* zope
	* odbc tests
	* mysql_stmt calls in drop-in library
	* better pythondb/rubydbi tests
	* test init scripts
	* test send query w/length
	* test upper/lower/mixed column case methods
	* need database reconnect tests
	* column flags
	* getFieldAsXXX
	* getOutputBindAsXXX
	* Java "getXXXAsByteArray" methods
	* check blob/lobs with binary data in them
	* perl dbi driver
		execute_array
		bind_param_array
		selectall_arrayref with attr/binds
		selectall_hashref with attr/binds
		selectcol_arrayref with attr/binds
		selectrow_array with attr/binds
		selectrow_arrayref with attr/binds
		selectrow_hashref with attr/binds
		prepare_cached
		fetchall_arrayref with slice
		quote
		err
		errstr
		state
		begin_work
		available_drivers
		data_sources
	* oldmysql test files for non-C++ api's

Documentation:

Performance/Code Enhancements:
	* db2 first query fails and forces relogin unless detached first
		which causes problems if reloginatstart is not set
		using tcp connections fixes this but is slower
	* Don't fork listener children, use listen() backlog instead
		linux:
			looks like max is 128 on linux 2.0
			2.2/2.4 - /proc/sys/net/ipv4/tcp_max_syn_backlog
				Default is 1024 for systems with more than 128Mb
				of memory, and 128 for low memory machines.
				If you make it greater than 1024, change
				TCP_SYNQ_HSIZE in include/net/tcp.h to keep
				TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog
				and recompile kernel.
			syn cookies - no max backlog
		solaris:
			/usr/sbin/ndd -set /dev/tcp tcp_conn_req_max 32
	* perl apis -> CPAN
	* client connect timeout
	* store passwords in encrypted form in the config file
	* call endSession() from perl DBD finish method
	* implement column flags as a bitmap
	* persistent cursors - parse query, attach an id to it,
				make it available to other sessions
	* connection daemons could put buffers in shared memory and
		clients could send queries, access buffers using 
		shared memory and semaphores instead of unix sockets
	* api methods to use preallocated buffers for result sets
	* api methods for configuring optimistic buffer sizes
	* result set compression during transmission for distant relays
	* server side result set caching
	* support batch DML in oracle8
	* for databases that can return non-strings in their result sets, 
		send non strings to client
	* seperate modules into standalone builds
	* should be a single sqlr-connection daemon that dlopens the
		appropriate database module 
	* login errors should be printed on the screen by sqlrconnection class,
		not by individual connections
	* api for running queries in the background
		(asynchronous queries w/timeouts)
	* use async queries by default, even if the client runs a synchronous
		query, so the query can be cancelled if the client disconnects
	* support freetds/sybase ct_con_prop/encryption
	* use bandwidth delay product to set tcp send/receive buffer sizes

Features:
	* SSL encryption
	* verbose mode for export/import
	* daemontools compatibility
	* figure out how to get the drop-in client compiled into the mysql PHP
		module like the mysql native client is
	* query router support accessing different db's by specifying a
		different user/password
	* query router support accessing different db's by specifying which
		db to use
	* regex-based query rewriting
		if m/select blah from AAA[01|02|03].table/
		then s/AAA[01|02|03]/AAA/g
	* make fetch buffer sizes run-time configurable for db2 and sybase
	* make fetch buffer size configurable from a client call
	* add "quoting method" call to api, call mysql native function,
		(mysql_escape_string()/mysql_real_escape_string())
	* not sure about other db's
	* hack on postgresql's ecpg to emit SQL Relay code rather than
		Postgresql code
	* sqlite binds, sqlite utf-8/utf-16 functions
	* pythondb output bind variables?
	* zope bind variables?
	* 2-phase commit, use it in query router
	* use PAM if possible as alternative to defining users in sqlrelay.conf
	* support stored procedures that return result sets in interbase, db2
	* could debug logs be logrotate compatible?
	* postgresql drop-in api lacks many features
	* postgresql drop-in needs to parse out ; delimited queries for db's
		that don't support that, execute them seperately
	* mysql drop-in api lacks a few features, stmt functions need
		to be updated
	* sybase/freetds (possibly others) need options for setting chained
		mode and isolation mode when client connects
	* datatype support:
		handle binary data correctly in all databases
		identical long/lob datatype support in all databases
		more advanced long/lob datatype support
		support for array datatypes (oracle collections)
		handle blobs, quads in interbase
		handle timestamps
		handle enum types in mysql
	* front end replication
	* quotas
	* logging
	* handle commit/rollback for named transactions
	* implement API's that handle errors with exceptions
	* better transaction handling for postgresql
	* odbc connection should check the odbc definition
		for connect string arguments - SQLBrowseConnect
	* solaris init script
	* api needs to expose integer column types
	* call dontGetColumnInfo() when doing fetchrow_array calls in DBD driver
	* Some databases (like postgresql) are in auto-commit mode unless you
		manually begin a transaction.  SQL Relay calls commit/rollback
		at the end of a client session, even if the database is in
		auto-commit mode.  For postgresql at least, this is expensive.
		It should only call commit/rollback if the database isn't in
		auto-commit mode.
	* date object binds
	* DML/DDL caching - if db is down, accept queries and run them when the
		db comes back up
	* kerberos/gssapi authentication
	* support Google Datastore
	* web sql database? : http://dev.w3.org/html5/webdatabase/

Availability:
	* connections should ping database server every so often to make sure
		it's up, if it's not, relogin
	* failover - master, fallback databases, where connection only goes to
		the fallback if the master is overloaded or down
	* if a connection dies mysteriously, a new one should fire up

API's:
	* C#
	* Ruby-on-rails adapter
        * javascript/ajax

Drop-in replacement libraries:
	* Oracle OCI7/8
	* Sybase-ct
	* Interbase

DB Compatibility:
	* Informix
	* xbsql

Bugs:
	* Zope API:
		doesn't handle money types right
		ImageFile needs to be App.ImageFile in zope 2.11 and up
		meta_types, __ac_permissions_- and methods attributes are long
			deprecated
		installing under lib/python/Products in zope 2 doesn't work
		zope 3 doesn't have lib/python/Products
	* The PHP Pear DB driver doesn't handle ? chars properly inside double
		quotes.  I think it probably also doesn't handle escaped quotes
		properly either.
	* there are cases with DB2 where data in a DB that's not using UTF-8
		may be returned converted to UTF-8.  How do we get the data out
		in the same encoding that it's in the DB in?
		http://www.ibm.com/developerworks/data/library/techarticle/dm-0506chong/index.html
	* allowing query timeout appears to hang the sqlrelay server
	* PHP pear db only returns 100 rows with this code:
		$query = "SELECT id, name FROM ct_contest ORDER BY name ASC;";
        		$db->setFetchMode(DB_FETCHMODE_ASSOC);
        		$result = $db->query($query);
                		while ($line = $result->fetchRow(DB_FETCHMODE_ASSOC)) {
                 		print ("\t<option value=\"$line[id]\" $selected>$line[name]</option>\n");
                		print "$line[name]\n";
        		}
        		$result->free();
	* just because sqlrelay is compiled against unixodbc which supports
		odbc 3.0 api, individual drivers may not support the 3.0 api,
		so sqlrelay needs to detect this or it needs to at least be
		configurable
		use SQLGetInfo with SQL_ODBC_API_CONFORMANCE, can return:
			SQL_OAC_NONE
			SQL_OAC_LEVEL1
			SQL_OAC_LEVEL2
	* query router "do something"'s
	* SID may not be necessary, binds and escaping can prevent SQL
		injection, verify that they are sufficient in SQL Relay and put
		docs in the FAQ.
		See http://en.wikipedia.org/wiki/SQL_injection
	* get sid working, document or remove it
	* SID how to:
		create db
		create user
		mysql -usiddb -psiddb siddb < siddb
		set up sqlrelay instance to talk to it
		set up another instance to use siddb instance for sid
		populate siddb
		sidparameters:
			sparam=INGRESS - perform ingress filtering
				EGRESS - perform egress filtering
				LISTEN - ???
				VERIFICATION - don't send queries to db
				PREVENTION - send queries to db if ok
			svalue=1/0

		sidingressblist - ingress blacklist
			sql_state - queries to reject
		sidingresswlist - ingress whitelist
			sql_state - queries to accept,
					overrides blacklist
		sidingressldb - ingress learning database
			parsed_sql - ???

		sidegressblist - egress blacklist
			sql_state - "parsed results" to reject
		sidegresswlist - egress whitelist
			sql_state - "parsed results" to accept
					overrides blacklist
		sidegressldb - egress learning database
			parsed_sql - ???
		what are "parsed results" - something to do with column names...
			sidlog - every query is logged here with a message
					about it
	* if a client connects and the forked listener ends up waiting for a
		connection and the client disconnects, the forked listener has
		no way of knowing that the client has disconnected and can't
		bail
	* semop's can return ENOSPC if the undo list is full which is unhandled
		and causes deadlocks in the sqlr-listeners.  If we get an
		ENOSPC, then we need to send the client an error and the
		sqlr-listener needs to exit.
	* Need to find a way to re-distribute connections.
		If 2 db's go down and 2nd comes back up first, all log into 2nd
		db and never log out and back into first
		connection daemons could just re-log in on a random interval
	* When dynamic scaling is used, a spike in client connections could
		cause a great many connections to be spawned and then steady
		traffic afterwards could cause them all to stay active even
		though a fewer number of connections could handle the traffic
	* if scaler fires off connections, one doesn't time out...
		this is actually more generic - connections which have announced
		themselves as available to the listener disable their ttl alarm
		so they won't die off after being registered
	* scaler reaper should fire off from SIGCLD and not depend on another
		client connection

Tests:
	* php pear db bind formats
	* db2 temp tables
	* odbc temp tables
	* zope
	* odbc tests
	* better pythondb/rubydbi tests
	* test init scripts
	* test send query w/length
	* test upper/lower/mixed column case methods
	* need database reconnect tests
	* column flags
	* getFieldAsXXX
	* getOutputBindAsXXX
	* Java "getXXXAsByteArray" methods
	* check blob/lobs with binary data in them
	* perl dbi driver
		execute_array
		bind_param_array
		selectall_arrayref with attr/binds
		selectall_hashref with attr/binds
		selectcol_arrayref with attr/binds
		selectrow_array with attr/binds
		selectrow_arrayref with attr/binds
		selectrow_hashref with attr/binds
		prepare_cached
		fetchall_arrayref with slice
		quote
		err
		errstr
		state
		begin_work
		available_drivers
		data_sources
	* oldmysql test files for non-C++ api's

Documentation:
	* ODBC requires numbers rather than names for bind variables,
		make sure ODBC docs say that you have to use numbers for
		bind variables
	* how to use SQL Relay with joomla
	* how to use new features of Tony/Erik's perl dbi patch
	* getting started with odbc
	* "how sqlrelay works" with diagrams and animations
	* example sqlrelay.conf's for different configurations
	* performance benchmark charts

Performance/Code Enhancements:
	* unify bind architecture
		- all connections use MAXVAR and similar logic
		- push some logic up into sqlrcursor_svr class
	* we might be able to do without sem(8) in the scaler since the
		scaler knows how many connections it has started and killed
	* reset autocommit state when new client logs into sqlrelay
	* NLS_LANG-like issues with other db's?
	* db2 first query fails and forces relogin unless detached first
		which causes problems if reloginatstart is not set
		using tcp connections fixes this but is slower
	* Don't fork listener children, use listen() backlog instead
		linux:
			looks like max is 128 on linux 2.0
			2.2/2.4 - /proc/sys/net/ipv4/tcp_max_syn_backlog
				Default is 1024 for systems with more than 128Mb
				of memory, and 128 for low memory machines.
				If you make it greater than 1024, change
				TCP_SYNQ_HSIZE in include/net/tcp.h to keep
				TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog
				and recompile kernel.
			syn cookies - no max backlog
		solaris:
			/usr/sbin/ndd -set /dev/tcp tcp_conn_req_max 32
	* perl apis -> CPAN
	* client connect timeout
	* store passwords in encrypted form in the config file
	* call endSession() from perl DBD finish method
	* implement column flags as a bitmap
	* persistent cursors - parse query, attach an id to it,
				make it available to other sessions
	* connection daemons could put buffers in shared memory and
		clients could send queries, access buffers using 
		shared memory and semaphores instead of unix sockets
	* api methods to use preallocated buffers for result sets
	* api methods for configuring optimistic buffer sizes
	* result set compression during transmission for distant relays
	* server side result set caching
	* support batch DML in oracle8
	* for databases that can return non-strings in their result sets, 
		send non strings over network to client
	* separate modules into standalone builds
	* should be a single sqlr-connection daemon that dlopens the
		appropriate database module 
	* login errors should be printed on the screen by sqlrconnection class,
		not by individual connections
	* api for running queries in the background
		(asynchronous queries w/timeouts)
	* use async queries by default, even if the client runs a synchronous
		query, so the query can be cancelled if the client disconnects
	* use bandwidth delay product to set tcp send/receive buffer sizes

Features:
	* need to add timeout option to sqlrsh
	* add functionality of query, fields, sqltodbf to sqlrsh, replace them
	* add xml output api and functionality to sqlrsh
	* support old oracle long datatype like a lob
	* convert dtd to xml schema
	* get odbc driver working better
	* get odbc driver working sufficiently to use with jdbc
	* Perl DBI driver needs to convert bind vars from ?'s to
		db-appropriate format like PHP Pear DB driver does
	* Non C/C++ api's need a method to close cursors.  Specifically, bind
		cursors cannot be closed manually and must be garbage collected.
		It's not an issue for memory, but rather a server-side cursor
		will be occupied until it's garbage collected.  On C/C++ you
		can just delete it.
	* return error code/number
	* SSL encryption
	* verbose mode for export/import
	* support network protocols for mysql, postgresql
		rather than using drop-in replacement libs
		blackray supports postgresql protocol, I might be able to grab
		some code from it to implement the same
	* query router support accessing different db's by specifying a
		different user/password
	* query router support accessing different db's by specifying which
		db to use
	* regex-based query rewriting
		if m/select blah from AAA[01|02|03].table/
		then s/AAA[01|02|03]/AAA/g
	* make fetch buffer sizes run-time configurable for db2 and sybase
	* make fetch buffer size configurable from a client call
	* add "quoting method" call to api, call mysql native function,
		(mysql_escape_string()/mysql_real_escape_string())
	* sqlite binds, sqlite utf-8/utf-16 functions
	* pythondb output bind variables?
	* zope bind variables?
	* 2-phase commit, use it in query router
	* authentication options
		* use PAM if possible as alternative to
			defining users in sqlrelay.conf
		* kerberos/gssapi authentication
	* support stored procedures that return result sets in interbase, db2
	* could debug logs be logrotate compatible?
	* sybase/freetds (possibly others) need options for setting chained
		mode and isolation mode when client connects
	* support freetds/sybase ct_con_prop/encryption
	* datatype support:
		handle binary data correctly in all databases
		identical long/lob datatype support in all databases
		more advanced long/lob datatype support
		support for array datatypes (oracle collections)
		handle blobs, quads in interbase
		handle timestamps
		handle enum types in mysql
	* front end replication
	* quotas
	* logging
	* handle commit/rollback for named transactions (posgresql, others?)
	* odbc connection should check the odbc definition
		for connect string arguments - SQLBrowseConnect
	* solaris init script
	* api needs to expose integer column types
	* call dontGetColumnInfo() when doing fetchrow_array calls in DBD driver
	* Some databases (like postgresql) are in auto-commit mode unless you
		manually begin a transaction.  SQL Relay calls commit/rollback
		at the end of a client session, even if the database is in
		auto-commit mode.  For postgresql at least, this is expensive.
		It should only call commit/rollback if the database isn't in
		auto-commit mode.
	* date object binds
	* DML/DDL caching - if db is down, accept queries and run them when the
		db comes back up
	* sqlite supports virtual tables implemented via modules
		create module for each DB type using database connection classes
		use this and :memory: filename to achieve cross-db joins
		create module for xbase tables to use SQL on those
		create module for csv's
		lots of possibilities
	* extend query filtering to rewrite queries

Availability:
	* connections should ping database server every so often to make sure
		it's up, if it's not, relogin
	* failover - master, fallback databases, where connection only goes to
		the fallback if the master is overloaded or down
	* if a connection dies mysteriously, a new one should fire up

API's:
	* C#
	* Ruby-on-rails adapter
        * javascript/ajax
	* PHP PDO driver  http://wiki.cc/php/PDO
	* PHP MDB2 driver

DB Compatibility:
	* Informix
	* xbsql
	* Google Datastore
	* web sql database? : http://dev.w3.org/html5/webdatabase/

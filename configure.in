dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/listener/sqlrlistener.C)

dnl Compile time options.
AC_ARG_ENABLE(small-code,
	[  --enable-small-code           optimize for small code size],
	SMALLCODE="-O -Os",
	SMALLCODE="")
AC_ARG_ENABLE(debug,
	[  --enable-debug                compile with -g and -pg options and don't strip binaries],
	CFLAGS="-g -pg -Wall"; CXXFLAGS="-g -pg -fno-exceptions -Wall"; INSTALLSTRIP="",
	CFLAGS="-fomit-frame-pointer -Wall"; CXXFLAGS="-fomit-frame-pointer -fno-exceptions -Wall"; INSTALLSTRIP="-s")
AC_SUBST(INSTALLSTRIP)
AC_SUBST(SMALLCODE)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_ARG_ENABLE(client-rpath,
	[  --enable-client-rpath         Use -rpath when linking SQL Relay client programs against SQL Relay libraries],
	CLIENTUSERPATH="yes",
	CLIENTUSERPATH="")
AC_SUBST(CLIENTUSERPATH)
AC_ARG_ENABLE(server-rpath,
	[  --enable-server-rpath         Use -rpath when linking SQL Relay server programs against SQL Relay libraries],
	SERVERUSERPATH="yes",
	SERVERUSERPATH="")
AC_SUBST(SERVERUSERPATH)
AC_ARG_ENABLE(static,
	[  --enable-static               Enable static linking],
	STATICLINK="-static",
	STATICLINK="")
AC_ARG_WITH(rudiments-prefix,
	[  --with-rudiments-prefix       Location of rudiments],
	RUDIMENTSPATH="$withval",
	RUDIMENTSPATH="")
AC_ARG_WITH(libgdbm-prefix,
	[  --with-libgdbm-prefix         Location of libgdbm],
	GDBMPATH="$withval",
	GDBMPATH="")
AC_ARG_WITH(oracle-home,
	[  --with-oracle-home            Location of Oracle],
	ORACLE_HOME="$withval")
AC_ARG_ENABLE(oracle,
	[  --disable-oracle              Don't build Oracle connection],
	ENABLE_ORACLE="",
	ENABLE_ORACLE="yes")
AC_ARG_ENABLE(oracle-rpath,
	[  --disable-oracle-rpath        Don't use -rpath when building Oracle connection],
	ORACLEUSERPATH="",
	ORACLEUSERPATH="yes")
AC_SUBST(ORACLEUSERPATH)
AC_ARG_WITH(mysql-prefix,
	[  --with-mysql-prefix           Location of MySQL],
	MYSQLPATH="$withval",
	MYSQLPATH="")
AC_ARG_ENABLE(mysql,
	[  --disable-mysql               Don't build MySQL connection],
	ENABLE_MYSQL="",
	ENABLE_MYSQL="yes")
AC_ARG_ENABLE(mysql-rpath,
	[  --enable-mysql-rpath          Use -rpath when building MySQL connection],
	MYSQLUSERPATH="yes",
	MYSQLUSERPATH="")
AC_SUBST(MYSQLUSERPATH)
AC_ARG_WITH(msql-prefix,
	[  --with-msql-prefix            Location of mSQL],
	MSQLPATH="$withval",
	MSQLPATH="")
AC_ARG_ENABLE(msql,
	[  --disable-msql                Don't build mSQL connection],
	ENABLE_MSQL="",
	ENABLE_MSQL="yes")
AC_ARG_ENABLE(msql-rpath,
	[  --enable-msql-rpath           Use -rpath when building mSQL connection],
	MSQLUSERPATH="yes",
	MSQLUSERPATH="")
AC_SUBST(MSQLUSERPATH)
AC_ARG_WITH(postgresql-prefix,
	[  --with-postgresql-prefix      Location of PostgreSQL],
	POSTGRESQLPATH="$withval",
	POSTGRESQLPATH="")
AC_ARG_ENABLE(postgresql,
	[  --disable-postgresql          Don't build PostgreSQL connection],
	ENABLE_POSTGRESQL="",
	ENABLE_POSTGRESQL="yes")
AC_ARG_ENABLE(postgresql-rpath,
	[  --enable-postgresql-rpath     Use -rpath when building PostgreSQL connection],
	POSTGRESQLUSERPATH="yes",
	POSTGRESQLUSERPATH="")
AC_SUBST(POSTGRESQLUSERPATH)
AC_ARG_WITH(sqlite-prefix,
	[  --with-sqlite-prefix          Location of SQLite],
	SQLITEPATH="$withval",
	SQLITEPATH="")
AC_ARG_ENABLE(sqlite,
	[  --disable-sqlite              Don't build SQLite connection],
	ENABLE_SQLITE="",
	ENABLE_SQLITE="yes")
AC_ARG_ENABLE(sqlite-rpath,
	[  --enable-sqlite-rpath         Use -rpath when building SQLite connection],
	SQLITEUSERPATH="yes",
	SQLITEUSERPATH="")
AC_SUBST(SQLITEUSERPATH)
AC_ARG_WITH(lago-prefix,
	[  --with-lago-prefix            Location of Lago],
	LAGOPATH="$withval",
	LAGOPATH="")
AC_ARG_ENABLE(lago,
	[  --disable-lago                Don't build Lago connection],
	ENABLE_LAGO="",
	ENABLE_LAGO="yes")
AC_ARG_ENABLE(lago-rpath,
	[  --enable-lago-rpath           Use -rpath when building Lago connection],
	LAGOUSERPATH="yes",
	LAGOUSERPATH="")
AC_SUBST(LAGOUSERPATH)
AC_ARG_WITH(freetds-prefix,
	[  --with-freetds-prefix         Location of FreeTDS],
	FREETDSPATH="$withval",
	FREETDSPATH="")
AC_ARG_ENABLE(freetds,
	[  --disable-freetds             Don't build FreeTDS connection],
	ENABLE_FREETDS="",
	ENABLE_FREETDS="yes")
AC_ARG_ENABLE(freetds-rpath,
	[  --disable-freetds-rpath       Don't use -rpath when building FreeTDS connection],
	FREETDSUSERPATH="",
	FREETDSUSERPATH="yes")
AC_SUBST(FREETDSUSERPATH)
AC_ARG_WITH(sybase-prefix,
	[  --with-sybase-prefix          Location of Sybase],
	SYBASEPATH="$withval",
	SYBASEPATH="")
AC_ARG_ENABLE(sybase,
	[  --disable-sybase              Don't build Sybase connection],
	ENABLE_SYBASE="",
	ENABLE_SYBASE="yes")
AC_ARG_ENABLE(sybase-rpath,
	[  --disable-sybase-rpath        Don't use -rpath when building Sybase connection],
	SYBASEUSERPATH="",
	SYBASEUSERPATH="yes")
AC_SUBST(SYBASEUSERPATH)
AC_ARG_WITH(odbc-prefix,
	[  --with-odbc-prefix            Location of ODBC],
	ODBCPATH="$withval",
	ODBCPATH="")
AC_ARG_ENABLE(odbc,
	[  --disable-odbc                Don't build ODBC connection],
	ENABLE_ODBC="",
	ENABLE_ODBC="yes")
AC_ARG_ENABLE(odbc-rpath,
	[  --enable-odbc-rpath           Use -rpath when building ODBC connection],
	ODBCUSERPATH="yes",
	ODBCUSERPATH="")
AC_SUBST(ODBCUSERPATH)
AC_ARG_WITH(db2-prefix,
	[  --with-db2-prefix             Location of DB2],
	DB2PATH="$withval",
	DB2PATH="")
AC_ARG_ENABLE(db2,
	[  --disable-db2                 Don't build DB2 connection],
	ENABLE_DB2="",
	ENABLE_DB2="yes")
AC_ARG_ENABLE(db2-rpath,
	[  --disable-db2-rpath            Use -rpath when building DB2 connection],
	DB2USERPATH="",
	DB2USERPATH="yes")
AC_SUBST(DB2USERPATH)
AC_ARG_WITH(interbase-prefix,
	[  --with-interbase-prefix       Location of Interbase],
	INTERBASEPATH="$withval",
	INTERBASEPATH="")
AC_ARG_ENABLE(interbase,
	[  --disable-interbase           Don't build Interbase connection],
	ENABLE_INTERBASE="",
	ENABLE_INTERBASE="yes")
AC_ARG_ENABLE(interbase-rpath,
	[  --enable-interbase-rpath      Use -rpath when building Interbase connection],
	INTERBASEUSERPATH="yes",
	INTERBASEUSERPATH="")
AC_SUBST(INTERBASEUSERPATH)
AC_ARG_WITH(perl-prefix,
	[  --with-perl-prefix            Location of Perl],
	PERLPATH="$withval",
	PERLPATH="")
AC_ARG_WITH(perl-install-prefix,
	[  --with-perl-install-prefix    Where to install perl api],
	PERLINSTALLPREFIX="$withval",
	PERLINSTALLPREFIX="")
AC_ARG_ENABLE(perl,
	[  --disable-perl                Don't build Perl api],
	ENABLE_PERL="",
	ENABLE_PERL="yes")
AC_ARG_WITH(python-prefix,
	[  --with-python-prefix          Location of Python],
	PYTHONPATH="$withval",
	PYTHONPATH="")
AC_ARG_ENABLE(python,
	[  --disable-python              Don't build Python api],
	ENABLE_PYTHON="",
	ENABLE_PYTHON="yes")
AC_ARG_ENABLE(python-rpath,
	[  --enable-python-rpath         Use -rpath when linking the Python library against the SQL Relay client library],
	PYTHONUSERPATH="yes",
	PYTHONUSERPATH="")
AC_SUBST(PYTHONUSERPATH)
AC_ARG_WITH(zope-prefix,
	[  --with-zope-prefix            Location of Zope],
	ZOPEPATH="$withval",
	ZOPEPATH="")
AC_ARG_ENABLE(zope,
	[  --disable-zope                Don't build Zope api],
	ENABLE_ZOPE="",
	ENABLE_ZOPE="yes")
AC_ARG_WITH(ruby-prefix,
	[  --with-ruby-prefix            Location of Ruby],
	RUBYPATH="$withval",
	RUBYPATH="")
AC_ARG_ENABLE(ruby,
	[  --disable-ruby                Don't build Ruby api],
	ENABLE_RUBY="",
	ENABLE_RUBY="yes")
AC_ARG_WITH(java-prefix,
	[  --with-java-prefix            Location of Java],
	JAVAPATH="$withval",
	JAVAPATH="")
AC_ARG_ENABLE(java,
	[  --disable-java                Don't build Java api],
	ENABLE_JAVA="",
	ENABLE_JAVA="yes")
AC_ARG_ENABLE(java-rpath,
	[  --enable-java-rpath           Use -rpath when linking the Java library against the SQL Relay client library],
	JAVAUSERPATH="yes",
	JAVAUSERPATH="")
AC_SUBST(JAVAUSERPATH)
AC_ARG_WITH(php-prefix,
	[  --with-php-prefix             Location of PHP],
	PHPPATH="$withval",
	PHPPATH="")
AC_ARG_ENABLE(php,
	[  --disable-php                 Don't build PHP api],
	ENABLE_PHP="",
	ENABLE_PHP="yes")
AC_ARG_ENABLE(php-rpath,
	[  --enable-php-rpath            Use -rpath when linking the PHP library against the SQL Relay client library],
	PHPUSERPATH="yes",
	PHPUSERPATH="")
AC_SUBST(PHPUSERPATH)
AC_ARG_WITH(tcl-include,
	[  --with-tcl-include		 Location of tcl.h include file],
	TCLINCLUDEPATH="$withval",
	TCLINCLUDEPATH="")
AC_ARG_WITH(tcl-libraries,
	[  --with-tcl-libraries		 Location of libtcl],
	TCLLIBSPATH="$withval",
	TCLLIBSPATH="")
AC_ARG_ENABLE(tcl,
	[  --disable-tcl                 Don't build TCL api],
	ENABLE_TCL="",
	ENABLE_TCL="yes")
AC_ARG_ENABLE(tcl-rpath,
	[  --enable-tcl-rpath            Use -rpath when linking the TCL library against the SQL Relay client library],
	TCLUSERPATH="yes",
	TCLUSERPATH="")
AC_SUBST(TCLUSERPATH)
AC_ARG_ENABLE(c-rpath,
	[  --enable-c-rpath              Use -rpath when linking the C library against the SQL Relay client library],
	CUSERPATH="yes",
	CUSERPATH="")
AC_SUBST(CUSERPATH)
AC_ARG_ENABLE(psql-rpath,
	[  --enable-psql-rpath           Use -rpath when linking the psql replacement library against the SQL Relay client library],
	PSQLUSERPATH="yes",
	PSQLUSERPATH="")
AC_SUBST(PSQLUSERPATH)
AC_ARG_WITH(gtk-prefix,
	[  --with-gtk-prefix             Location of GTK+],
	GTKPATH="$withval",
	GTKPATH="")
AC_ARG_ENABLE(gtk,
	[  --disable-gtk                 Don't build GTK+ configuration tool],
	ENABLE_GTK="",
	ENABLE_GTK="yes")
AC_ARG_WITH(pthread-prefix,
	[  --with-pthread-prefix         Location of pthread library],
	PTHREADPATH="$withval",
	PTHREADPATH="")
AC_ARG_WITH(system-libtool,
	[  --with-system-libtool   use system libtool instead of ./libtool],
	USE_SYSTEM_LIBTOOL="$withval",
	USE_SYSTEM_LIBTOOL="no")
AC_ARG_ENABLE(dmalloc,
	[  --enable-dmalloc              Use the dmalloc library],
	DMALLOC="1"; LIBDMALLOC="-ldmalloc",
	DMALLOC=""; LIBDMALLOC="")
AC_DEFINE_UNQUOTED(DMALLOC,1,Use dmalloc)
AC_SUBST(LIBDMALLOC)
AC_ARG_ENABLE(efence,
	[  --enable-efence               Use the efence library],
	LIBEFENCE="-lefence",
	LIBEFENCE="")
AC_SUBST(LIBEFENCE)


dnl Rewrite supplied paths.
PWD=`pwd`
if ( test -n "$RUDIMENTSPATH"  -a "`echo $RUDIMENTSPATH | cut -c-3`" = "../" ); then
	RUDIMENTSPATH="$PWD/$RUDIMENTSPATH"
fi
if ( test -n "$GDBMPATH" -a "`echo $GDBMPATH | cut -c-3`" = "../" ); then
	GDBMPATH="$PWD/$GDBMPATH"
fi
if ( test -n "$MYSQLPATH" -a "`echo $MYSQLPATH | cut -c-3`" = "../" ); then
	MYSQLPATH="$PWD/$MYSQLPATH"
fi
if ( test -n "$MSQLPATH" -a "`echo $MSQLPATH | cut -c-3`" = "../" ); then
	MSQLPATH="$PWD/$MSQLPATH"
fi
if ( test -n "$POSTGRESQLPATH" -a "`echo $POSTGRESQLPATH | cut -c-3`" = "../" ); then
	POSTGRESQLPATH="$PWD/$POSTGRESQLPATH"
fi
if ( test -n "$SQLITEPATH" -a "`echo $SQLITEPATH | cut -c-3`" = "../" ); then
	SQLITEPATH="$PWD/$SQLITEPATH"
fi
if ( test -n "$LAGOPATH" -a "`echo $LAGOPATH | cut -c-3`" = "../" ); then
	LAGOPATH="$PWD/$LAGOPATH"
fi
if ( test -n "$FREETDSPATH" -a "`echo $FREETDSPATH | cut -c-3`" = "../" ); then
	FREETDSPATH="$PWD/$FREETDSPATH"
fi
if ( test -n "$SYBASEPATH" -a "`echo $SYBASEPATH | cut -c-3`" = "../" ); then
	SYBASEPATH="$PWD/$SYBASEPATH"
fi
if ( test -n "$ODBCPATH" -a "`echo $ODBCPATH | cut -c-3`" = "../" ); then
	ODBCPATH="$PWD/$ODBCPATH"
fi
if ( test -n "$DB2PATH" -a "`echo $DB2PATH | cut -c-3`" = "../" ); then
	DB2PATH="$PWD/$DB2PATH"
fi
if ( test -n "$INTERBASEPATH" -a "`echo $INTERBASEPATH | cut -c-3`" = "../" ); then
	INTERBASEPATH="$PWD/$INTERBASEPATH"
fi
if ( test -n "$PERLPATH" -a "`echo $PERLPATH | cut -c-3`" = "../" ); then
	PERLPATH="$PWD/$PERLPATH"
fi
if ( test -n "$PERLINSTALLPREFIX" -a "`echo $PERLINSTALLPREFIX | cut -c-3`" = "../" ); then
	PERLINSTALLPREFIX="$PWD/$PERLINSTALLPREFIX"
fi
if ( test -n "$PYTHONPATH" -a "`echo $PYTHONPATH | cut -c-3`" = "../" ); then
	PYTHONPATH="$PWD/$PYTHONPATH"
fi
if ( test -n "$ZOPEPATH" -a "`echo $ZOPEPATH | cut -c-3`" = "../" ); then
	ZOPEPATH="$PWD/$ZOPEPATH"
fi
if ( test -n "$RUBYPATH" -a "`echo $RUBYPATH | cut -c-3`" = "../" ); then
	RUBYPATH="$PWD/$RUBYPATH"
fi
if ( test -n "$JAVAPATH" -a "`echo $JAVAPATH | cut -c-3`" = "../" ); then
	JAVAPATH="$PWD/$JAVAPATH"
fi
if ( test -n "$PHPPATH" -a "`echo $PHPPATH | cut -c-3`" = "../" ); then
	PHPPATH="$PWD/$PHPPATH"
fi
if ( test -n "$GTKPATH" -a "`echo $GTKPATH | cut -c-3`" = "../" ); then
	GTKPATH="$PWD/$GTKPATH"
fi
if ( test -n "$PTHREADPATH" -a "`echo $PTHREADPATH | cut -c-3`" = "../" ); then
	PTHREADPATH="$PWD/$PTHREADPATH"
fi
if ( test -n "$TCLINCLUDEPATH" -a "`echo $TCLINCLUDEPATH | cut -c-3`" = "../" ); then
	TCLINCLUDEPATH="$PWD/$TCLINCLUDEPATH"
fi
if ( test -n "$TCLLIBSPATH" -a "`echo $TCLLIBSPATH | cut -c-3`" = "../" ); then
	TCLLIBSPATH="$PWD/$TCLLIBSPATH"
fi


dnl Checks for programs.
echo
echo "***** Programs ***************"
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_LANG(C++)

dnl have to set ar here because libtool (currently) fails
dnl to use the correct one when cross-compiling
AC_CHECK_PROG(AR,$host_alias-ar,$host_alias-ar,ar)
AC_SUBST(AR)

FW_CHECK_LD_RPATH
FW_CHECK_PS
FW_CHECK_UNAME
FW_CHECK_GNU_STRIP
FW_CHECK_PIPE
echo "******************************"


dnl Checks for libtool.
echo
echo "***** Libtool ****************"
OLDCC=$CC
CC=$CXX
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
FW_CHECK_USE_SYSTEM_LIBTOOL
CC=$OLDCC
echo "******************************"


FW_CHECK_MICROSOFT

dnl Checks for inline keyword
echo
echo "***** Inline Functions *******"
FW_CHECK_INLINE
echo "******************************"


dnl Checks for thread library.
echo
echo "***** threads ****************"
FW_CHECK_PTHREAD
echo "******************************"


dnl Checks for libraries.
echo
echo "***** Libraries **************"

PRELIBS=$LIBS
LIBS="-lhistory -ltermcap"
AC_CHECK_LIB(readline,readline,READLINELIB="-lreadline" ,READLINELIB="")
LIBS=$PRELIBS

PRELIBS=$LIBS
LIBS="-ltermcap"
AC_CHECK_LIB(history,add_history,HISTORYLIB="-lhistory" ,HISTROYLIB="")
LIBS=$PRELIBS

AC_CHECK_LIB(termcap,tgetnum,TERMCAPLIB="-ltermcap" ,TERMCAPLIB="")

if ( test -n "$READLINELIB" -a -n "$HISTORYLIB" -a -n "$TERMCAPLIB" ); then
	AC_DEFINE_UNQUOTED(HAVE_READLINE,1,Do we have readline)
	READLINELIB="$READLINELIB $HISTORYLIB $TERMCAPLIB"
fi
AC_SUBST(READLINELIB)

AC_CHECK_LIB(socket,socket,SOCKETLIB=-lsocket,SOCKETLIB="")
AC_SUBST(SOCKETLIB)
AC_CHECK_LIB(xnet,gethostbyname,XNETLIB=-lxnet,XNETLIB="")
AC_SUBST(XNETLIB)
AC_CHECK_LIB(nsl,gethostbyname,NSLLIB=-lnsl,NSLLIB="")
AC_SUBST(NSLLIB)
AC_CHECK_LIB(dl,dlopen,DLLIB=-ldl,DLLIB="")
AC_SUBST(DLLIB)
AC_CHECK_LIB(aio,aioread,AIOLIB=-laio,AIOLIB="")
AC_SUBST(AIOLIB)
AC_CHECK_LIB(ssl,SSL_new,SSLLIB=-lssl,SSLLIB="")
AC_SUBST(SSLLIB)
AC_CHECK_LIB(crypto,CRYPTO_add_lock,CRYPTOLIB=-lcrypto,CRYPTOLIB="")
AC_SUBST(CRYPTOLIB)

FW_CHECK_NEED_REDHAT_9_GLIBC_2_3_2_HACK

echo "******************************"


dnl Checks for Rudiments.
echo
echo "***** Rudiments **************"
FW_CHECK_RUDIMENTS
echo "******************************"


dnl Checks for Oracle.
echo
echo "***** Oracle *****************"
FW_CHECK_ORACLE
echo "******************************"



dnl Checks for MySQL.
echo
echo "***** MySQL ******************"
FW_CHECK_MYSQL
echo "******************************"



dnl Checks for mSQL.
echo
echo "***** mSQL *******************"
FW_CHECK_MSQL
echo "******************************"


dnl Checks for PostgreSQL.
echo
echo "***** PostgreSQL *************"
FW_CHECK_POSTGRESQL
echo "******************************"



dnl Checks for SQLite.
echo
echo "***** SQLite *****************"
FW_CHECK_SQLITE
echo "******************************"



dnl Checks for Lago.
echo
echo "***** Lago *******************"
FW_CHECK_LAGO
echo "******************************"



dnl Checks for FreeTDS.
echo
echo "***** FreeTDS ******************"
FW_CHECK_FREETDS
echo "******************************"



dnl Checks for Sybase.
echo
echo "***** Sybase *****************"
FW_CHECK_SYBASE
echo "******************************"



dnl Checks for ODBC.
echo
echo "***** ODBC *********************"
FW_CHECK_ODBC
echo "******************************"



dnl Checks for DB2.
echo
echo "***** DB2 **********************"
FW_CHECK_DB2
echo "******************************"



dnl Checks for Interbase.
echo
echo "***** Interbase **************"
FW_CHECK_INTERBASE
echo "******************************"



dnl Checks for Perl.
echo
echo "***** Perl *******************"
FW_CHECK_PERL
echo "******************************"



dnl Checks for python.
echo
echo "***** Python *****************"
FW_CHECK_PYTHON
echo "******************************"



dnl Checks for zope.
echo
echo "***** Zope *******************"
FW_CHECK_ZOPE
echo "******************************"



dnl Checks for Ruby.
echo
echo "***** Ruby *******************"
FW_CHECK_RUBY
echo "******************************"



dnl Checks for Java.
echo
echo "***** Java *******************"
FW_CHECK_JAVA
echo "******************************"



dnl Checks for TCL.
echo
echo "***** TCL ********************"
FW_CHECK_TCL
echo "******************************"


dnl Checks for PHP.
echo
echo "***** PHP ********************"
FW_CHECK_PHP
echo "******************************"



dnl Checks for GTK+.
echo
echo "***** GTK+ *******************"
FW_CHECK_GTK
echo "******************************"



dnl Checks for header files.
echo
echo "***** Headers ****************"
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h strings.h)
echo "******************************"



dnl Checks for typedefs, structures, and compiler characteristics.
echo
echo "***** Structures *************"
AC_TYPE_MODE_T
AC_TYPE_SIGNAL
FW_CHECK_SIGNALS
echo "******************************"



dnl Checks for library functions.
echo
echo "***** Functions **************"
AC_CHECK_FUNCS(putenv setenv)
echo "******************************"


dnl Checks for rpm build directory.
RPM_BUILD_DIR=`rpm --eval "%_topdir" 2>/dev/null`
AC_SUBST(RPM_BUILD_DIR)



dnl Default build variables.
SQLR_VERSION="0.34"
AC_SUBST(SQLR_VERSION)
AC_DEFINE_UNQUOTED(SQLR_VERSION,"$SQLR_VERSION",Version)
dnl rules for CURRENT:REVISION:AGE version info:
dnl apply the following rules in order:
dnl if library source changed at all,         c:r:a -> c:r+1:a
dnl if interfaces added, removed, or changed, c:r:a -> c+1:0:a
dnl if interfaces added,                      c:r:a -> c:r:a+1
dnl if interfaces removed,                    c:r:a -> c:r:0
SONAME_VERSION_INFO="1:0:0"
AC_SUBST(SONAME_VERSION_INFO)
AC_SUBST(STATICLINK)
AC_PREFIX_DEFAULT(/usr/local/firstworks)
AC_CONFIG_HEADER(config.h)



dnl Search for Makefile.in's and output Makefiles from them.
echo
echo "***** Output Files ***********"
AC_SUBST(abs_srcdir)
AC_SUBST(abs_builddir)
if ( test -n "$HAVE_PERL" ); then
	if ( test ! -n "$PERLINSTALLPREFIX" )
	then
		perlprefix=`$PERL -V:prefix`
		PERLINSTALLPREFIX=`eval "$perlprefix"; echo $prefix`
	fi
	AC_SUBST(PERLINSTALLPREFIX)
fi


MAKELIST="config.mk src/api/perl/SQLRConnection/Makefile.PL src/api/perl/SQLRCursor/Makefile.PL src/api/perl/SQLRConnection/SQLRConnection.pm src/api/perl/SQLRCursor/SQLRCursor.pm src/api/perl/DBD/Makefile.PL src/api/perl/DBD/SQLRelay.pm bin/sqlr-stop bin/sqlrclient-config bin/sqlrclientwrapper-config init/openserver/init.d/sqlrelay init/redhat/init.d/sqlrelay init/slackware/rc.d/rc.sqlrelay init/debian/init.d/sqlrelay init/netbsd/rc.d/sqlrelay init/freebsd/rc.d/sqlrelay"
AC_OUTPUT($MAKELIST)
chmod 755 bin/sqlr-stop
chmod 755 bin/sqlrclient-config
chmod 755 bin/sqlrclientwrapper-config
chmod 755 init/openserver/init.d/sqlrelay
chmod 755 init/redhat/init.d/sqlrelay
chmod 755 init/slackware/rc.d/rc.sqlrelay
chmod 755 init/debian/init.d/sqlrelay
chmod 755 init/netbsd/rc.d/sqlrelay
chmod 755 init/freebsd/rc.d/sqlrelay



dnl Summary.
echo
echo "***** Summary ***********************************************"

echo " Version      : $SQLR_VERSION"

APIS=" API's        : C++  C  "
if ( test -n "$HAVE_PERL" ); then
	APIS=$APIS"Perl  "
fi
if ( test -n "$HAVE_PYTHON" ); then
	APIS=$APIS"Python  "
fi
if ( test -n "$HAVE_ZOPE" ); then
	APIS=$APIS"Zope  "
fi
if ( test -n "$HAVE_RUBY" ); then
	APIS=$APIS"Ruby  "
fi
if ( test -n "$HAVE_PHP" ); then
	APIS=$APIS"PHP  "
fi
if ( test -n "$HAVE_JAVA" ); then
	APIS=$APIS"Java  "
fi
if ( test -n "$HAVE_TCL" ); then
	APIS=$APIS"TCL "
fi
echo "$APIS"

ORACLE7BUILD="no     "
ORACLE8BUILD="no     "
MYSQLBUILD="no     "
MSQLBUILD="no     "
POSTGRESQLBUILD="no     "
SQLITEBUILD="no     "
LAGOBUILD="no     "
FREETDSBUILD="no     "
SYBASEBUILD="no     "
ODBCBUILD="no     "
DB2BUILD="no     "
INTERBASEBUILD="no     "
if ( test -n "$ORACLEVERSION" ); then
	ORACLE7BUILD="dynamic"
	if ( test -n "$ORACLESTATIC" ); then
		ORACLE7BUILD="static "
	fi
fi
if ( test -n "$ORACLEVERSION" -a "$ORACLEVERSION" != "7"); then
	ORACLE8BUILD="dynamic"
	if ( test -n "$ORACLESTATIC" ); then
		ORACLE8BUILD="static "
	fi
fi
if ( test -n "$MYSQLLIBS" ); then
	MYSQLBUILD="dynamic"
	if ( test -n "$MYSQLSTATIC" ); then
		MYSQLBUILD="static "
	fi
fi
if ( test -n "$MSQLLIBS" ); then
	MSQLBUILD="dynamic"
	if ( test -n "$MSQLSTATIC" ); then
		MSQLBUILD="static "
	fi
fi
if ( test -n "$POSTGRESQLLIBS" ); then
	POSTGRESQLBUILD="dynamic"
	if ( test -n "$POSTGRESQLSTATIC" ); then
		POSTGRESQLBUILD="static "
	fi
fi
if ( test -n "$SQLITELIBS" ); then
	SQLITEBUILD="dynamic"
	if ( test -n "$SQLITESTATIC" ); then
		SQLITEBUILD="static "
	fi
fi
if ( test -n "$LAGOLIBS" ); then
	LAGOBUILD="dynamic"
	if ( test -n "$LAGOSTATIC" ); then
		LAGOBUILD="static "
	fi
fi
if ( test -n "$FREETDSLIBS" ); then
	FREETDSBUILD="dynamic"
	if ( test -n "$FREETDSSTATIC" ); then
		FREETDSBUILD="static "
	fi
fi
if ( test -n "$SYBASELIBS" ); then
	SYBASEBUILD="dynamic"
	if ( test -n "$SYBASESTATIC" ); then
		SYBASEBUILD="static "
	fi
fi
if ( test -n "$ODBCLIBS" ); then
	ODBCBUILD="dynamic"
	if ( test -n "$ODBCSTATIC" ); then
		ODBCBUILD="static "
	fi
fi
if ( test -n "$DB2LIBS" ); then
	DB2BUILD="dynamic"
	if ( test -n "$DB2STATIC" ); then
		DB2BUILD="static "
	fi
fi
if ( test -n "$INTERBASELIBS" ); then
	INTERBASEBUILD="dynamic"
	if ( test -n "$INTERBASESTATIC" ); then
		INTERBASEBUILD="static "
	fi
fi
echo " Connections  : Oracle7     $ORACLE7BUILD       Oracle8    $ORACLE8BUILD"
echo "                MySQL       $MYSQLBUILD       mSQL       $MSQLBUILD"
echo "                PostgreSQL  $POSTGRESQLBUILD       SQLite     $SQLITEBUILD"
echo "                Lago        $LAGOBUILD       FreeTDS    $FREETDSBUILD"
echo "                Sybase      $SYBASEBUILD       ODBC       $ODBCBUILD"
echo "                DB2         $DB2BUILD       Interbase  $INTERBASEBUILD"

echo "*************************************************************"
echo
echo "If you expected a Connection or API that doesn't show up in the Summary"
echo "then the configure script probably couldn't find a package it needed to"
echo "build it.  You can manually specify package locations using command line"
echo "options."
echo
echo "Type:  configure --help   for a list of options."
echo

dnl Credits.
echo
echo "Thanks to MP3.com for sponsoring:"
echo "	Clustered/Replicated database support."
echo "	Perl API."
echo

if ( test "$FREETDSSYSTEMWARNING" = "yes" -a "$SYBASEBUILD" != "no     " )
then
	echo
	echo "WARNING!  FreeTDS and Sybase connections will both be built"
	echo "          but FreeTDS libraries and headers appear to have"
	echo "          been installed in /usr/include and /usr/lib paths."
	echo "          This will cause the Sybase connection to be compiled"
	echo "          against the FreeTDS headers and linked against a mix"
	echo "          of FreeTDS and Sybase libraries.  There is no good"
	echo "          way to prevent the compiler, linker or system from"
	echo "          searching those paths at compile, link or run time."
	echo "          Please re-run configure, with the --disable-sybase"
	echo "          option or, if you want to build both connections,"
	echo "          please re-install the FreeTDS headers and libraries"
	echo "          somewhere else.  If you are positive that the headers"
	echo "          and libraries in /usr/include and /usr/lib are in fact"
	echo "          from Sybase, not FreeTDS, please re-run configure with"
	echo "          the --disable-freetds option."
fi

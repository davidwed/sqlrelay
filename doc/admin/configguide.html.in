<html>
<head>
<title>firstworks   SQL Relay Configuration Guide</title>
<link href="../css/styles.css" rel="stylesheet">
</head>
<body>

<span class="heading1">SQL Relay Configuration Guide</span><br>

<ul>
<li><a href="#location">Configuration File Location</a></li>
<li><a href="#minimal">Minimal Configuration</a></li>
<li><a href="#connections">Database Connections</a></li>
<li><a href="#cursors">Database Cursors</a></li>
<li><a href="#dynamicscaling">Dynamic Scaling</a></li>
<li><a href="#listener">Listener Configuration</a></li>
<li><a href="#database">Database Configuration</a></li>
<li><a href="#sessionqueries">Session-Queries</a></li>
<li><a href="#instances">Multiple Instances</a></li>
<li><a href="#directory">Configuration Directory</a></li>
<li><a href="#specifying">Specifying Configuration Files</a></li>
<li><a href="#remote">Remote Configuration Files</a></li>
<li><a href="#linkfiles">Link Files</a></li>
<li><a href="#autostart">Starting Instances Automatically</a></li>
<li><a href="#ha">High Availability Environments</a></li>
<ul>
<li><a href="#cluster">Load-Balancing and Fail-Over With Replicated or Clustered Databases</a></li>
<li><a href="#rac">Already-Load-Balanced Databases</a></li>
<li><a href="#router">Master-Slave Query Routing</a></li>
<li><a href="#frontend">Front-End Load-Balancing and Fail-Over</a></li>
</ul>
<li><a href="#krb">Kerberos and Active Directory Encryption and Authentication</a></li>
<li><a href="#tls">TLS/SSL Encryption and Authentication</a></li>
<li><a href="#advanced">Advanced Configuration</a></li>
</ul>

<br><br><a name="location"></a>
<span class="heading2">Configuration File Location</span><br>

<p>When SQL Relay is first installed, no configuration file exists.  You must create one in the appropriate location.</p>

<p>This location depends on the platform and on how you installed SQL Relay.</p>

<ul>
<li>Unix and Linux</li>
<ul>
<li>Built from source - <b>/usr/local/firstworks/etc/sqlrelay.conf</b></li>
<ul>
<li>(however, if you specified a --prefix or --sysconfdir during the build, then it might be in a different location)</li>
</ul>
<li>RPM package - <b>/etc/sqlrelay.conf</b></li>
<li>FreeBSD package - <b>/usr/local/etc/sqlrelay.conf</b></li>
<li>NetBSD package - <b>/usr/pkg/etc/sqlrelay.conf</b></li>
<li>OpenBSD package - <b>/usr/local/etc/sqlrelay.conf</b></li>
</ul>
<li>Windows</li>
<ul>
<li>Built from source - <b>C:\Program Files\Firstworks\etc\sqlrelay.conf</b></li>
<li>Windows Installer package - <b>C:\Program Files\Firstworks\etc\sqlrelay.conf</b></li>
<ul>
<li>(however, if you specified a different folder during installatoin, then it might be in a different location)
</ul>
</ul>
</ul>


<br><br><a name="minimal"></a>
<span class="heading2">Minimal Configuration</span><br>

<p>The most minimal SQL Relay configuration would be something like:</p>

<blockquote>
@sqlrelay-minimal.conf.html@
</blockquote>

<p>This configuration defines an instance of SQL Relay named <i>example</i>, secured by a user and password, that opens and maintains a pool of 5 persistent connections to the <i>orcl</i> instance of an Oracle database using <i>scott</i>/<i>tiger</i> credentials.</p>

<p>The instance can be started using:</p>

<blockquote>
<code>
sqlr-start -id example
</code>
</blockquote>

<p>By default, SQL Relay listens on all available network interfaces, on port 9000.  It can be accessed remotely by hostname.  For example, if the server running SQL Relay is named <i>sqlrserver</i> then it can be accessed using:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -user sqlruser -password sqlrpassword
</code>
</blockquote>

<p>SQL Relay's remote accessibility makes it useful as a database proxy.  See <a href="../features/proxying.html">Proxying</a> for more information.</p>

<p>It can also be accessed from the local server using <i>localhost</i>.</p>

<blockquote>
<code>
sqlrsh -host localhost -user sqlruser -password sqlrpassword
</code>
</blockquote>

<p>(<b>NOTE:</b> For versions of SQL Relay prior to 0.56, additional parameters were required for a minimal configuration.  In particular, either the port or socket parameter was required in the instance tag, the dbtype parameter was required in the instance tag, and connectionid and metric parameters were required in the connection tag.  See below, or see the <a href="configreference.html">Configuration Reference</a> for information about these parameters.)</p>


<br><br><a name="connections"></a>
<span class="heading2">Database Connections</span><br>

<p>By default, SQL Relay opens and maintains a pool of 5 persistent database connections, but the number of connections can be configured using the connections attribute.</p>

<blockquote>
@sqlrelay-connections.conf.html@
</blockquote>

<p><A href="../features/connectionpooling.html">Connection pooling</a> reduces the amount of time it takes an app to connect to the database, which can dramatically improve performance for many applications.</p>

<p>The number of connections determines how many client applications can access the database simultaneously .  In this case, up to 10, assuming each client only needs one connection.  Additional clients will be queued and must wait for one of the first 10 to disconnect before being able to access the database.</p>

<p>Any number of connections can be opened.  In a performance-oriented configuration, a good rule of thumb is to open as many as you can, and that number is usually dictated by database, system and network resources.  However, if you intend to <a href="../features/throttling.html">throttle</a> (limit) database access to a particular application, then you may intentionally configure a small number of connections.</p>


<br><br><a name="cursors"></a>
<span class="heading2">Database Cursors</span><br>

<p>Database cursors are used to execute queries and step through result sets.  Most applications only need to use one cursor at a time.  Some apps require more though, either because they run nested queries, or sometimes because they just don't properly free them.</p>

<p>SQL Relay maintains persistent cursors as well as connections.  By default, each connection opens one cursor, but the number of cursors opened by each connection can be configured using the cursors attribute.</p>

<blockquote>
@sqlrelay-cursors.conf.html@
</blockquote>

<p>Any number of cursors can be opened.  A good rule of thumb is to open as few as possible but as many as you know that your application will need.</p>


<br><br><a name="dynamicscaling"></a>
<span class="heading2">Dynamic Scaling</span><br>

<p>Both connections and cursors can be configured to scale dynamically - open on demand and then die off when no longer needed.  This feature is useful if you have spikes in traffic during certain times of day or if your application has a few modules that occasionally need more cursors than usual.</p>

<p>The maxconnections and maxcursors attribute define the upper bounds.</p>

<blockquote>
@sqlrelay-dynamicscaling.conf.html@
</blockquote>

<p>In this example, 10 connections will be started initially but more will be be started as necessary, up to 20.  Each of the newly spawned connections will die off if they are inactive for longer than 1 minute.</p>

<p>In this example, each connection will initially open 2 cursors but more will be opened as necessary, up to 10.  Each newly opened cursor will be closed as soon as it is no longer needed.</p>

<p>Other attributes that control dynamic scaling behavior include:</p>

<ul>
<li>maxqueuelength</li>
<li>growby</li>
<li>ttl</li>
<li>cursors_growby</li>
</ul>

<p>See the <a href="configreference.html">SQL Relay Configuration Reference</a> for more information on these attributes.</p>


<br><br><a name="listener"></a>
<span class="heading2">Listener Configuration</span><br>

<p>By default, SQL Relay listens for client connections on port 9000, on all available network interfaces.</p>

<p>It can be configured to listen on a different port though...</p>

<blockquote>
@sqlrelay-port.conf.html@
</blockquote>

<p>...and accessed using:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -port 9001 -user sqlruser -password sqlrpassword
</code>
</blockquote>

<p>It can also be configured to listen on a unix socket...</p>

<blockquote>
@sqlrelay-socket.conf.html@
</blockquote>

<p>...and accessed from the local server using:</p>

<blockquote>
<code>
sqlrsh -socket /tmp/example.socket -user sqlruser -password sqlrpassword
</code>
</blockquote>

<p>If the server has multiple network interfaces, SQL Relay can also be configured to listen on specific IP addresses.</p>

<blockquote>
@sqlrelay-addresses.conf.html@
</blockquote>

<p>When configured this way, it can be accessed on 192.168.1.50 and 192.168.1.51 but not on 127.0.0.1 (localhost).</p>

<p>If the socket option is specified but port and addresses options are not, then SQL Relay will only listen on the socket.  If addresses/port and socket options are both specified then it listens on both.</p>


<br><br><a name="database"></a>
<span class="heading2">Database Configuration</span><br>

<p>By default, SQL Relay assumes that it's connecting to an Oracle database, but SQL Relay supports many other databases.  The dbase attribute can be used to specify the database type.</p>

<p>In the following example, SQL Relay is configured to connect to a SAP/Sybase database.</p>

<blockquote>
@sqlrelay-sap.conf.html@
</blockquote>

<p>In this example, SQL Relay is configured to connect to an IBM DB2 database.</p>

<blockquote>
@sqlrelay-db2.conf.html@
</blockquote>

<p>When connecting to an Oracle database, the dbase attribute may be omitted or set to "oracle".</p>

<p>SQL Relay supports many different databases and the connect string options (options in the string attribute of the connection tag) are different for each database.  See the <a href="configreference.html">SQL Relay Configuration Reference</a> for valid dbase settings and information on connect string options for each database.</p>
<br><br><a name="sessionqueries"></a>
<span class="heading2">Session-Queries</span><br>

<p>SQL Relay can be configured to run a set of queries at the beginning and end of each client session.</p>

<p>By far the most common use for this feature is that some database parameter needs to be reconfigured but you don't have permission or bouncing the database is out of the question, or something like that.  For example, lets say you are using an Oracle database, but your app requires dates to be formatted like MM/DD/YYYY instead of DD-MON-YYYY.  Ideally you'd alter the nls_date_format in the instance but you can't, for some reason.</p>

<p>You can use SQL Relay's session queries to work around the problem.</p>

<p>In the following example, the date format is set to MM/DD/YYYY at the beginning of the session and then reset back to DD-MON-YYYY at the end.</p>

<blockquote>
@sqlrelay-sessionqueries.conf.html@
</blockquote>

<p>Actually, in this example, there's no need to set the date format back to DD-MON-YYYY but it's done here for illustrative purposes.</p>


<br><br><a name="instances"></a>
<span class="heading2">Multiple Instances</span><br>

<p>Any number of SQL Relay instances can be defined in the configuration file.</p>

<p>In following example, instances that connect to Oracle, SAP/Sybase and DB2 are defined in the same file.</p>

<blockquote>
@sqlrelay-multiple.conf.html@
</blockquote>

<p>These instances can be started using:</p>

<blockquote>
<code>
sqlr-start -id oracleexample<br>
sqlr-start -id sapexample<br>
sqlr-start -id db2example
</code>
</blockquote>

<p>...and accessed using:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -port 9000<br>
sqlrsh -host <i>sqlrserver</i> -port 9001<br>
sqlrsh -host <i>sqlrserver</i> -port 9002<br>
</code>
</blockquote>


<br><br><a name="directory"></a>
<span class="heading2">Configuration Directory</span><br>

<p>While any number of SQL Relay instances can be defined in a single configuration file, it might be more convenient to split configurations up into multiple files.</p>

<p>The default the SQL Relay configuration directory depends on the platform and on how you installed SQL Relay.</p>

<ul>
<li>Unix and Linux</li>
<ul>
<li>Built from source - <b>/usr/local/firstworks/etc/sqlrelay.conf.d</b></li>
<ul>
<li>(however, if you specified a --prefix or --sysconfdir during the build, then it might be in a different location)</li>
</ul>
<li>RPM package - <b>/etc/sqlrelay.conf.d</b></li>
<li>FreeBSD package - <b>/usr/local/etc/sqlrelay.conf.d</b></li>
<li>NetBSD package - <b>/usr/pkg/etc/sqlrelay.conf.d</b></li>
<li>OpenBSD package - <b>/usr/local/etc/sqlrelay.conf.d</b></li>
</ul>
<li>Windows</li>
<ul>
<li>Built from source - <b>C:\Program Files\Firstworks\etc\sqlrelay.conf.d</b></li>
<li>Windows Installer package - <b>C:\Program Files\Firstworks\etc\sqlrelay.conf.d</b></li>
<ul>
<li>(however, if you specified a different folder during installatoin, then it might be in a different location)
</ul>
</ul>
</ul>

<p>Additional configuration files may be created under this directory.  These files must follow the same format as the main configuration file.</p>

<p>For example, if you wanted to split up oracle, sap and db2 configurations into 3 separate files, you could create:</p>

<p><b>.../sqlrelay.conf.d/oracle.conf</b></p>

<blockquote>
@sqlrelay-multipleoracle.conf.html@
</blockquote>

<p><b>.../sqlrelay.conf.d/sap.conf</b></p>

<blockquote>
@sqlrelay-multiplesap.conf.html@
</blockquote>

<p><b>.../sqlrelay.conf.d/db2.conf</b></p>

<blockquote>
@sqlrelay-multipledb2.conf.html@
</blockquote>


<br><br><a name="specifying"></a>
<span class="heading2">Specifying Configuration Files</span><br>

<p>In addition to the -id option, the sqlr-start program also takes a -config option.  The -config option can be used to specify a configuration file or directory other than the default.</p>

<p>For example:</p>

<blockquote>
<code>
sqlr-start -id oracleexample -config /home/myuser/mysqlrelay.conf<br/>
sqlr-start -id oracleexample -config file:///home/myuser/mysqlrelay.conf<br/>
sqlr-start -id oracleexample -config dir:///home/myuser/mysqlrelay.conf.d<br/>
</code>
</blockquote>

<p>(the file:// prefix is optional when specifying a file, but the dir:// prefix must be included when specifying a directory)</p>

<p>The -config option may also be used to specify a comma-separated list of files or directories.  For example:</p>

<blockquote>
<code>
sqlr-start -id oracleexample -config /home/myuser/mysqlrelay-1.conf,/home/myuser/mysqlrelay-2.conf</br>
sqlr-start -id oracleexample -config /home/myuser/mysqlrelay-1.conf,/home/myuser/mysqlrelay-2.conf,dir:///home/myuser/mysqrelay.conf.d</br>
sqlr-start -id oracleexample -config /home/myuser/mysqlrelay-1.conf,/home/myuser/mysqlrelay-2.conf,dir:///home/myuser/mysqrelay-1.conf.d,dir:///home/myuser/mysqrelay-2.conf.d</br>
</code>
</blockquote>

<p>Files and directories are processed in the order that they are specified.</p>


<br><br><a name="remote"></a>
<span class="heading2">Remote Configuration Files</span><br>

<p>In addition to local configuration files, the -config option may also be used to specify configuration files located on a remote host, accessible via http.</p>

<p>Actually, if the Rudiments library upon which SQL Relay depends was compiled with support for libcurl, then configuration files may also be remotely accessible over other protocols supported by libcurl, such as https, ftp, scp, sftp, smb, etc.</p>

<p>For example:</p>

<blockquote>
<code>
sqlr-start -id oracleexample -config http://configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/>
sqlr-start -id oracleexample -config http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/>
sqlr-start -id oracleexample -config http://[/usr/local/firstworks/etc/sqlruserpwd.txt]@configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/><br/>
sqlr-start -id oracleexample -config https://configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/>
sqlr-start -id oracleexample -config https://myuser:mypassword@configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/>
sqlr-start -id oracleexample -config https://[/usr/local/firstworks/etc/sqlruserpwd.txt]@configserver.mydomain.com/sqlrconfig/sqlrelay.conf<br/><br/>
sqlr-start -id oracleexample -config scp://myuser:mypassword@configserver.mydomain.com/usr/local/firstworks/etc/sqlrelay.conf<br/>
sqlr-start -id oracleexample -config scp://[/usr/local/firstworks/etc/sqlruserpwd.txt]@configserver.mydomain.com/usr/local/firstworks/etc/sqlrelay.conf<br/>
</code>
</blockquote>

<p>(Note: the https and scp examples would only work if Rudiments is compiled with support for libcurl.)</p>

<p>In some of the examples above, a user and password are given in the url, separated by a colon, prior to the @ sign.  In other examples, in place of a literal user and password, a user-password file is specified in square brackets.  If a user-password file is used, then the file should contain a single line, consisting of colon-separated user and password.  For example:</p>

<blockquote>
<code>myuser:mypassword</code>
</blockquote>

<p>Password protection is recommended for remotely accessible configuration files as they may contain users and passwords for accessing the database and SQL Relay itself.</p>

<p>Using user-password files is recommended over passing literal users and passwords.  The files can be protected with file permissions, they prevent the user and password from being stored in the script that starts SQL Relay, and they prevent the user and password from being displayed in a process listing.</p>


<br><br><a name="linkfiles"></a>
<span class="heading2">Link Files</span><br>

<p>So far, the example configuration files have all been XML files, containing configurations for instances of SQL Relay.</p>

<p>However, a configuration file can, alternatively, be a "link file", containing nothing but links to other configuration files.</p>

<p>For example:</p>

<blockquote>
<code>
<font color="#0000ff"># oracle configuration</font><br/>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/oracle.conf</font><br/>
<br/>
<font color="#0000ff"># sap/sybase configuration</font><br/>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/sap.conf</font><br/>
<br/>
<font color="#0000ff"># db2 configuration</font><br/>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/db2.conf</font><br/>
</code>
</blockquote>

<p>Lines starting with # are considered to be comments and blank lines are ignored, but every other line is interpreted as the location of a local configuration file, local configuration directory, or remote configuration file, as described in the previous sections.</p>

<p>Each of these files or directories are processed in the order that they are specified.</p>

<p>Link files can be used to centralize configuration.  For example, if you have several SQL Relay servers, rather than distributing configuration files across the servers, you could create an identical sqlrelay.conf file on each of them like:</p>

<blockquote>
<code><font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/sqlrelay.conf</font></code>
</blockquote>

<p>And then, on configserver.mydomain.com, host an sqlrelay.conf file like:</p>

<blockquote>
<code>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/oracle.conf</font><br/>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/sap.conf</font><br/>
<font color="#008b8b">http://myuser:mypassword@configserver.mydomain.com/sqlrconfig/db2.conf</font><br/>
</code>
</blockquote>

<p>The files oracle.conf, sap.conf, and db2.conf could then be hosted by and maintained on that server as well.</p>

<p>The links in these examples are all urls, but they could just as easily be links to local files and directories as well.  It is important to note though, that SQL Relay interprets all local file and directory locations relative to the local machine.  If a remotely hosted link file contains a reference to a local file or directory, then SQL Relay will look for that file on the local machine, not the remote machine.</p>

<p>Similarly, urls are resolved using the DNS configuration of the local machine as well, not the DNS configuration of the remote machine.</p>

<p>The urls in these examples all contain literal users and passwords.  User-password files can also be used as described in the section <a href="#remote">Remote Configuration Files</a>.  However, the user-password file must exist at the specified location on the local machine.</p>

<p>As link files can be protected by file permissions, and the urls stored in them aren't exposed anywhere else, such as in a process listing, user-password files are not generally necessary when using link files.</p>

<p>There is no limit to the depth of links.  A link file can reference another link file which references another, which references another, etc.  Too great a depth could lead to slow startup times though, especially when using remote configration files. This is especially significant when using <a href="#dynamicscaling">Dynamic Scaling</a>, as the configuration must be loaded each time a new connection is spawned.  Care should also be taken to avoid loops.</p>


<br><br><a name="autostart"></a>
<span class="heading2">Starting Instances Automatically</span><br>

<p>In all previous examples sqlr-start has been called with the -id option, specifying which instance to start.  If sqlr-start is called without the -id option then it will start all intances configured with the enabled attribute set to yes.</p>

<p>For example, if the following instances are defined...</p>

<blockquote>
@sqlrelay-autostart.conf.html@
</blockquote>

<p>...then calling sqlr-start without the -id parameter will start oracleexample and sapexample because enabled="yes" is configured for those instances.  db2example will not be started because enabled="yes" is not configured for that instance.</p>

<p>When installed on most platforms, SQL Relay creates an init script in the appropriate place under /etc.  This init script calls sqlr-start with no -id option.  If configured to run at boot, it will start all instances for which enabled="yes" is configured.</p>

<p>How to enable the init script depends on what platform you are using.</p>

<p>On Linux, Solaris, SCO and other non-BSD Unixes, this usually involves creating a symlink from /etc/init.d/sqlrelay to /etc/rc3.d/S85sqlrelay.</p>

<p>Redhat-derived Linux distributions have a chkconfig command that can do this for you.  Debian-derived Linux distributions provide the update-rc.d command.  Older versions of Solaris provide svcadm.  Newer versions of Solaris provide smf.</p>

<p>On FreeBSD you must add a line to /etc/rc.conf like:</p>

<blockquote>
sqlrelay_enabled=YES
</blockquote>

<p>On NetBSD you must add a line to /etc/rc.conf like:</p>

<blockquote>
sqlrelay=YES
</blockquote>

<p>On OpenBSD you must add a line to /etc/rc.conf like:</p>

<blockquote>
sqlrelay_flags=""
</blockquote>


<br><br><a name="ha"></a>
<span class="heading2">High Availabiltiy Environments</span><br>

<p>In a high availability environment, SQL Relay can be deployed as a front-end to provide load-balancing and fail-over for a set of replicated database servers or database cluster.  Load-balancing and fail-over can also be implemented over multiple SQL Relay servers.</p>


<br><br><a name="cluster"></a>
<span class="heading3">Load-Balancing and Fail-Over With Replicated or Clustered Databases</span><br>

<p>In a database cluster or replication environment, SQL Relay can be configured to maintain a pool of connections to the various database nodes and distribute client sessions over the nodes.  If an individual node fails, SQL Relay will attempt to reestablish connections to that node, while continuing to distribute client sessions over the remaining nodes.</p>

<table>
<tr>
<td><img src="../images/cluster.png"></td>
<td><img style="padding-left: 40px;" src="../images/replicated.png"></td>
</tr>
</table>

<p>In the configuration file, each connection tag defines a node to maintain connections to.  In the following example, SQL Relay is configured to distribute over three Oracle nodes - orcl1, orcl2, and orcl3</p>

<blockquote>
@sqlrelay-replicated.conf.html@
</blockquote>

<p>Any number of connection tags may be defined.</p>

<p>SQL Relay also supports disproportionate distribution of load. If some nodes can handle more traffic than others, then SQL Relay can be configured to send more traffic to the more capable nodes.</p>

<img src="../images/replicated-disproportionate.png">

<p>SQL Relay uses the connection tag's metric attribute to decide how many connections to open to each node.</p>

<blockquote>
@sqlrelay-replicated-disproportionate.conf.html@
</blockquote>

<p>The metric attribute doesn't specify the number of connections to open to each node, but the higher the metric relative to the other metrics, the more connections to that node will be opened and maintained.  For example, if the metric for the first node is twice as large as the metric for the second node, then SQL Relay will open twice as many connections to the first node as the second.</p>

<p>In the example above, 15 is 3 times 5, so 3 times as many connections will be opened to orcl2 as to orcl1.  30 is 6 times 5, so 6 times as many connections will be opened to orcl3 as orcl1.  Since a total of 10 connections will be opened, 1 will be opened to orcl1, 3 to orcl2, and 6 to orcl2.</p>


<br><br><a name="rac"></a>
<span class="heading3">Already-Load-Balanced Databases</span><br>

<p>In a typical database cluster or replicated environment, the nodes are identifiable as separate hosts.  However, when the nodes are located behind a load-balancing appliance or running on an application cluster, such as Oracle RAC, SQL Relay cannot identity an individual node.</p>

<p>In these environments, if a node goes down, SQL Relay will attempt to re-establish the connection, but rather than failing until the node comes back up, the new connection will more likely just succeed to a different node in the cluster.  Over time, this can lead to disproportionate load-balancing, with a bias toward nodes that have never gone down.</p>

<p>SQL Relay manages this by “shuffling” the connections periodically.  Every so often, each database connection is re-established, giving that connection a chance to be re-established to a node that may have gone down but is now back up.</p>

<p>To indicate to SQL Relay that the nodes are already-load-balanced, and need to be "shuffled" periodically, only one connection tag should be used, with the behindloadbalancer attribute set to "yes".</p>

<blockquote>
@sqlrelay-rac.conf.html@
</blockquote>


<br><br><a name="router"></a>
<span class="heading3">Master-Slave Query Routing</span><br>

<p>The load-balancing scenarios described above all assume that master-master replication is being used.  SQL Relay supports master-slave replication as well.</p>

<p>In a master-slave replication environment, SQL Relay can be configured to route DML and DDL queries to the master and distribute selects over the slaves.</p>

<img src="../images/router.png">

<p>This actually requires 3 instances of SQL Relay.  One to connect to the master, one to connect to the slaves, and a third to route queries to the first two.</p>

<blockquote>
@sqlrelay-router.conf.html@
</blockquote>

<p>The first two instances use familiar configuration options, but the third uses a dbtype of "router" and rather than defining connections, uses router, route and query tags to define query routing rules.</p>

<p>The router tag defines a set of routes.  The attributes of each route tag specify an instance of SQL Relay to connect to.  The pattern attribute of each query tag defines a regular expression used to match queries.  Queries that match the set of patterns defined in the route tag are sent to the instance of SQL Relay designated in the route tag.</p>

<p>The three instances can be started using:</p>

<blockquote>
<code>
sqlr-start -id master<br>
sqlr-start -id slave<br>
sqlr-start -id router
</code>
</blockquote>

<p>Client applications should connect to the router instance rather than the master or slave instances.</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -user routeruser -password routerpassword
</code>
</blockquote>

<p>See the <a href="router.html">Query Routing</a> for more information on query routing.</p>


<br><br><a name="frontend"></a>
<span class="heading3">Front-End Load-Balancing and Fail-Over</span><br>

<p>If you are building out a high availability environment, or if your pool of application servers is just sufficiently large, you might want to set up a pool of SQL Relay servers between your application servers and the database.</p>

<p>SQL Relay supports two front-end load-balancing and fail-over strategies.  In the first strategy, load-balancing and fail-over are provided by an appliance or application cluster.  In the second, SQL Relay provides its own load-balancing and fail-over, with some help from DNS.</p>

<p>Multiple instances of SQL Relay can be placed behind a load-balancing appliance.</p>

<img src="../images/loadbalancer.png">

<p>In this illustration, the load-balancing appliance is shown as a single machine, but in a true HA environment, there would be 2 or more appliances sharing a virtual IP.  Alternatively, rather than using an appliance, SQL Relay can be run on an application server cluster such as Linux Virtual Server.

<p><a href="http://en.wikipedia.org/wiki/Round-robin_DNS">Round-robin DNS</a> can be also be used to provide load-balancing and fail-over over multiple SQL Relay servers.</p>

<img src="../images/rrdns.png">

<p>In a round-robin DNS scenario, multiple IP addresses are assigned to the same host name.  The SQL Relay client is then configured to connect to that host.  When it requests the IP addresses for the host, the client receives all of the IP addresses assigned to it, rather than just a single address.</p>

<p>Round-robin DNS is so-called because, traditionally, the order of the IP addresses returned on successive requests alternated reliably, in round-robin fashion.  This behavior persists in many environments, but it is no longer guaranteed, as many modern DNS resolvers sort the list and return the IP addresses in the same order, every time.  SQL Relay clients randomize the list though, and try to connect to each of the IP addresses, one-at-a-time, until they succeed.  Doing so provides both load-balancing and fail-over without requiring an appliance or application server cluster.</p>


<br><br><a name="krb"></a>
<span class="heading2">Kerberos and Active Directory Encryption and Authentication</span><br>

<p>SQL Relay supports Kerberos encryption and authentication.</p>

<p>When Kerberos encryption and authentication is used:</p>

<ul>
<li>All communications between the SQL Relay client and SQL Relay server are encrypted.</li>
<li>A user who has authenticated against a Kerberos KDC or Active Directory Domain Controller can access SQL Relay without having to provide additional credentials.</li>
</ul>

<p>On Linux and Unix systems, both server and client environments must be "Kerberized".  <!--See <a href="http://systems.firstowrks.com/p/kerberos.html">Getting Started with Kerberos</a> for detailed instructions.-->  On Windows systems, both server and client must join an Active Directory Domain.  Note that this is only available on Professional or Server versions of Windows.  Home versions cannot join Active Directory Domains.</p>

<p>The following configuration configures an instance of SQL Relay to use Kerberos authentication and encryption:</p>

<blockquote>
@sqlrelay-krb.conf.html@
</blockquote>

<ul>
<li>The <b>krb</b> parameter enables (or disables) Kerberos authentication and encryption.</li>
<li>The <b>krbservice</b> parameter specifies which Kerberos service to use.  This parameter is optional and defaults to "sqlrelay".  It is only shown here for illustrative purposes.</li>
<li>The <b>krbkeytab</b> parameter specifies the location of the keytab file containing the key for the specified Kerberos service.  This parameter is not required on Windows.  On Linux or Unix systems if this paramter is omitted, then it defaults to the system keytab, usually /etc/krb5.keytab</li>
<li>The <b>krb_userlist</b> auth module authorizes a set of Kerberos-authenticated users.  Note that users are specified in both user@REALM (Kerberos) format and REALM\user (Active Directory) format to support users authenticated against both systems.  See <a href="../modules/auths.html">Extension Modules - Auth</a> for more information about auth modules.</li>
</ul>

<p>To start the instance on a Linux or Unix system, you must be logged in as a user that can read the file specified by the krbkeytab parameter.</p>

<p>To start the instance on a Windows system, you must be logged in as a user that can proxy the service specified by the krbservice parameter (or it's default value of "sqlrelay" if omitted).</p>

<p>If those criteria are met, starting the Kerberized instance of SQL Relay is the same as starting any other instance:</p>

<blockquote>
<code>
sqlr-start -id example
</code>
</blockquote>

<p>To access the instance, you must acquire a Kerberos ticket-granting ticket.  On a Linux or Unix system, this typically involves running <i>kinit</i>, though a fully Kerberized environment may acquire this during login.  On a Windows system, you must log in as an Active Directory domain user.</p>

<p>After acquiring the ticket-granting ticket, the instance of SQL Relay may be accessed from a Linux or Unix system as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -krb
</code>
</blockquote>

<p>From a Windows system, it may be necessary to specify the fully qualified Kerberos service name as well:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -krb -krbservice sqlrelay/sqlrserver.firstworks.com@AD.FIRSTWORKS.COM
</code>
</blockquote>

<p>Note the absence of user and password parameters.</p>

<p>Kerberos authentication establishes trust between the user who acquired the ticket-granting ticket (the user running the client program) and the service (the SQL Relay server) as follows:</p>

<ul>
<li>The client program uses the user's ticket-granting ticket to acquire a ticket for the sqlrelay service.</li>
<li>The client program then uses this service ticket to establish a security context with the SQL Relay server.</li>
<li>During this process the client program sends the SQL Relay server the user name that was used to acquire the original ticket-granting ticket.</li>
<li>If the security context can be successfully established, then the SQL Relay server can trust that the client program is being run by the user that it says it is.</li>
</ul>

<p>Once the SQL Relay server trusts that the client is being run by the user that it says it is, the krb_userlist auth module authorizes that user against the list of valid users.</p>

<p>While Kerberos authenticated and encrypted sessions are substantially more secure than standard SQL Relay sessions, several factors contribute to a performance penalty:</p>

<ul>
<li>The client program may have to acquire a service ticket from another server (the Kerberos KDC or Active Directory Domain Controller) prior to connecting to the SQL Relay server.</li>
<li>When establishing the secure session, a significant amount of data must be sent back and forth between the client and server over multiple network round-trips.</li>
<li>Kerberos imposes a limit on the amount of data that can be sent or received at once, so more round trips may be required when processing queries.</li>
<li>Without dedicated encryption hardware and a Kerberos implementation that supports it, the computation involved in encrypting and decrypting data can also introduce delays.</li>
</ul>

<p>Any kind of full SQL Relay session encryption should be used with caution in performance-sensitive applications.</p>


<br><br><a name="tls"></a>
<span class="heading2">TLS/SSL Encryption and Authentication</span><br>

<p>SQL Relay supports TLS/SSL encryption and authentication.</p>

<p>When TLS/SSL encryption and authentication is used:</p>

<ul>
<li>All communications between the SQL Relay client and SQL Relay server are encrypted.</li>
<li>SQL Relay clients and servers may optionally validate each other's certificates and identities.</li>
</ul>

<p>When using TLS/SSL encryption and authentication, at minimum, a certificate must be supplied to the SQL Relay server.  For highly secure production environments, this certificate should come from a trusted certificate authority.  In other environments the certificate may be self-signed, or even be borrowed from another server.  Linux and Unix systems support a variety of certificate formats, including the popular .pem format.  On Windows systems, only the .pfx certificate format is currently supported.
<!--Instructions for creating self-signed certificates and converting between certificate formats can be found at <a href="http://systems.firstowrks.com/p/tls.html">Getting Started with TLS/SSL</a>.-->
</p>

<p>The following configuration enables TLS/SSL security for an instance of SQL relay:</p>

<blockquote>
@sqlrelay-tls.conf.html@
</blockquote>

<ul>
<li>The <b>tls</b> parameter enables (or disables) TLS/SSL encryption.</li>
<li>The <b>tlscert</b> parameter specifies a TLS/SSL certificate to use.  A .pem file is specified in this example, but on Windows systems, a .pfx file must be used.</li>
</ul>

<p>To start the instance on a Linux or Unix system, you must be logged in as a user that can read the file specified by the tlscert parameter.  If that criterium is met then the instance can be started using:</p>

<blockquote>
<code>
sqlr-start -id example
</code>
</blockquote>

<p>The instance may be accessed as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -user sqlruser -password sqlrpassword -tls -tlsvalidate no
</code>
</blockquote>

<p>This establishes a TLS/SSL-encrypted session but does not validate the server's certificate or identity.  The session will only continue if the server's certificate is is well-formed and hasn't expired, <b>but the client is still vulnerable to various attacks</b>.</p>

<br>

<p>For a more secure session, the client may validate that the server's certificate was signed by a trusted certificate authority, known to the system, as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -user sqlruser -password sqlrpassword -tls -tlsvalidate ca
</code>
</blockquote>

<p>If the server's certificate is self-signed, then the certificate authority won't be known to the system, but it's certificate may be specified by the tlsca parameter as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -user sqlruser -password sqlrpassword -tls -tlsvalidate ca -tlsca /usr/local/firstworks/etc/sqlrca.pem
</code>
</blockquote>

<p>(a .pem file is specified in this example, but on Windows systems, a .pfx file must be used)</p>

<p>This establishes a TLS/SSL-encrypted session with the server and validates the server's certificate, but does not validate the server's identity.  The session will only continue if the server's certificate is valid, <b>but the client is still vulnerable to various attacks</b>.</p>

<br>

<p>For a more secure session, the client may validate that the host name provided by the server's certificate matches the host name that the client meant to connect to, as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver.firstworks.com</i> -user sqlruser -password sqlrpassword -tls -tlsvalidate ca+host -tlsca /usr/local/firstworks/etc/sqlrca.pem
</code>
</blockquote>

<p>(.pem files are specified in this example, but on Windows systems, .pfx files must be used)</p>

<p>Note that the fully qualified host name was provided.  Note also the use of the ca+host value for the tlsvalidate parameter.  With these parameters, in addition to validating that the server's certificate was signed by a trusted certificate authority, the host name will also be validated.  If the certificate contains Subject Alternative Names, then the host name will be compared to each of them.  If no Subject Alternative Names are provided then the host name will be compared to the certificate's Common Name.  The session will only continue if the sever's certificate and identity are both valid.</p>

<br>

<p>Unless self-signed, certificates can be expensive, so certificates are often shared by multiple servers across a domain.  To manage environments like this, the host name validation can be relaxed as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver.firstworks.com</i> -user sqlruser -password sqlrpassword -tls -tlsvalidate ca+domain -tlsca /usr/local/firstworks/etc/sqlrca.pem
</code>
</blockquote>

<p>(a .pem file is specified in this example, but on Windows systems, a .pfx file must be used)</p>

<p>Note that the fully qualified host name was provided.  Note also the use of the ca+domain value for the tlsvalidate parameter.  With these parameters, in addition to validating that the server's certificate was signed by a trusted certificate authority, the domain name portion of the host name will also be validated.  If the certificate contains Subject Alternative Names, then the domain name portion of the host name will be compared to the domain name portion of each of them.  If no Subject Alternative Names are provided then the domain name portion of the host name will be compared to the domain name portion of the certificate's Common Name.  The session will only continue if the sever's certificate and domain identity are both valid.</p>

<br>

<p>For a more secure session, the server may request a certificate from the client, validate the certificate, and optionally authorize the client based on the host name provided by the certificate.</p>

<p>The following configuration enables these checks for an instance of SQL relay:</p>

<blockquote>
@sqlrelay-tls-validate.conf.html@
</blockquote>

<ul>
<li>The <b>tlsvalidate</b> parameter enables (or disables) validation that client's certificate was signed by a trusted certificate authority, known to the system, or as provided by the tlsca parameter.</li>
<li>The <b>tlsca</b> parameter specifies a certificate authority to include when validating the client's certificate.  This is useful when validating self-signed certificates.</li>
<li>The <b>tls_userlist</b> auth module authorizes the Subject Alternative Names in the client's certificate (or Common Name of no SAN's are present) against a list of valid names.  See <a href="../modules/auths.html">Extension Modules - Auth</a> for more information about auth modules.</li>
</ul>

<p>To access the instance, the client must provide, at minimum, a certificate, as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver</i> -tls -tlsvalidate no -tlscert /usr/local/firstworks/etc/sqlrclient.pem
</code>
</blockquote>

<p>(a .pem file is specified in this example, but on Windows systems, a .pfx file must be used)</p>

<p>Note the absence of user and password parameters.  Rather than passing a user and password, the client passes the specified certificate to the server.  The server trusts that the client is who they say they are by virtue of having a valid certificate and the tls_userlist auth module authorizes the name provided by the certificate against the list of valid names.</p>

<p>In a more likely use case, cross-validation occurs - the client validates the server and the server validates the client, as follows:</p>

<blockquote>
<code>
sqlrsh -host <i>sqlrserver.firstworks.com</i> -tls -tlscert /usr/local/firstworks/etc/sqlrclient.pem -tlsvalidate ca+host -tlsca /usr/local/firstworks/etc/sqlrca.pem
</code>
</blockquote>

<p>(.pem files are specified in this example, but on Windows systems, .pfx files must be used)</p>

<p>In this example, the client provides a certificate for the server to validate, validates the host's certificate against the provided certificate authority, and validates the host's identity against the provided host name.</p>

<p>While TLS/SSL authenticated and encrypted sessions are substantially more secure than standard SQL Relay sessions, several factors contribute to a performance penalty:</p>

<ul>
<li>When establishing the secure session, a significant amount of data must be sent back and forth between the client and server over multiple network round-trips.</li>
<li>Some TLS/SSL implementations impose a limit on the amount of data that can be sent or received at once, so more round trips may be required when processing queries.</li>
<li>Without dedicated encryption hardware and a TLS/SSL implementation that supports it, the computation involved in encrypting and decrypting data can also introduce delays.</li>
</ul>

<p>Any kind of full SQL Relay session encryption should be used with caution in performance-sensitive applications.</p>



<br><br><a name="advanced"></a>
<span class="heading2">Advanced Configuration</span><br>

<p>The configuration file supports many more attributes and features than the ones described in this guide including tuning options and extension modules.  See the <a href="configreference.html">SQL Relay Configuration Reference</a> and <a href="tuning.html">Tuning SQL Relay</a> for more information.</p>

</body>
</html>

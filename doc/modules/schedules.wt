= Connection Schedule Modules =

* [#introduction Introduction]
* [#available Available Modules]
* [#custom Custom Modules]

----

[=#introduction"]
== Introduction ==

Connection schedule modules allow the SQL Relay server ...

The //schedules// section of the sqlrelay.conf file indicates which schedules modules to load and what parameters to use when executing them.

{{{#!blockquote
@sqlrelay-schedules-cron.conf.html@
}}}

The //module// attribute specifies which module to load.

Module configurations may have attributes and/or nested tags.  How these elements are interpreted is module-specific.

Currently, all schedule modules have an //enabled// parameter, allowing the module to be temporarily disabled.  If enabled="no" is configured, then the module is disabled.  If set to any other value, or omitted, then the module is enabled.

Connection schedule modules can be "stacked".  Multiple modules may be loaded and multiple instances of the same type of module, with different configurations, may also be loaded.

{{{#!blockquote
@sqlrelay-schedules-stacked.conf.html@
}}}

At startup, the SQL Relay server creates instances of the specified schedule modules and initializes them...

[=#available"]
== Available Modules ==

Currently, the following filter modules are available:

* '''cron'''

=== cron ===

...

[=#custom"]
=== Custom Modules ===

You can create your own custom query connection schedule modules too.

SQL Relay provides a base class for connection schedule modules, called sqlrschedule, defined in the header file: sqlrserver.h

{{{#!blockquote
@sqlrschedule.h.html@
}}}

On non-Windows platforms, it's most likely installed in /usr/local/firstworks/include/sqlrelay if you built from source or /usr/include/sqlrelay if you installed a package.  On Windows platforms, it's most likely installed in C:\Program Files\Firstworks\include\sqlrelay.

The default implementaion of the constructor just sets the member variables //sqlrfs//, //parameters// and //debug// to the corresponding passed-in values.  //sqlrfs// is a pointer to an instance of the sqlrschedules class, which provides various helper methods.  //parameters// is a representation of the XML tag in the sqlrelay.conf file that loaded the module.  //debug// is just a flag, indicating whether debug is requested or not.  The module should consult this flat and print out some debug if it is true.

By default, the destructor does nothing.

run() does nothing by default and returns true, indicating that no error occurred.

A custom module module must contain a class that inherits from sqlrschedule, implements the necessary methods, and implements a function to return an instance of the class.

Lets say we want to create a custom schedule module that ...

We can create the file ...

{{{#!blockquote
@sqlrschedule-....cpp.html@
}}}

Here, the ... class inherits from sqlrschedule.  The constructor just calls the parent constructor.  The run() method ...

Note the "new_sqlrschedule_...()" function which just allocates an instance of .... and returns it.  This function is essential to provide, and it is essential that it be named "new_sqlrschedule_modulename" and take sqlrschedules *, xmldomnode * and bool.  It is also essential that it be wrapped with an //extern "C"// clause to prevent it from being name-mangled by the compiler.

To build the module on a Linux or Unix system, run a command like:

{{{#!blockquote
{{{
gcc -shared `sqlrserver-config --cflags` `rudiments-config --cflags` -o sqlrschedule_....so ....cpp `sqlrserver-config --libs` `rudiments-config --libs`
}}}
}}}

This will create the file sqlrschedule_....so

On Mac OSX, run a command like:

{{{#!blockquote
{{{
gcc -bundle `sqlrserver-config --cflags` `rudiments-config --cflags` -o sqlrschedule_....bundle ....cpp `sqlrserver-config --libs` `rudiments-config --libs`
}}}
}}}

This will create the sqlrschedule_....bundle

On Windows, run commands like:

{{{#!blockquote
{{{
cl /I"C:\Program Files\Firstworks\include" /c ....cpp
link -out:sqlrschedule_....dll /LIBPATH:"C:\Program Files\Firstworks\lib" libsqlrserver.lib librudiments.lib
}}}
}}}

This will create the sqlrschedule_....dll

It is essential that the file be named: sqlrschedule_modulename.extension

To install the new module, copy it to the SQL Relay "modules" directory.  On non-Windows platforms, that is most likely /usr/local/firstworks/libexec/sqlrelay if you built from source, or /usr/libexec/sqlrelay if you installed a package.  On Windows platforms, that is most likely C:\Program Files\Firstworks\libexec\sqlrelay

To configure an instance of SQL Relay to use your module, you will need to update the sqlrelay.conf file to include a "schedules" section:

{{{#!blockquote
@sqlrelay-schedules-....conf.html@
}}}

The server will see the module="..." attribute in the sqlrelay.conf file, look in the "modules" directory for sqlrschedule_....extension, load it and and run the new_sqlrschedule_...() method to get an instance of the ... class and then run the various methods of that class.

This example module doesn't have any parameters, but if you create a module that does then you can access them via the the protected "parameters" member variable.  For example:

{{{#!blockquote
@sqlrschedule-param.cpp.html@
}}}

Refer to the Rudiments documentation for more info on the [http://rudiments.sourceforge.net/rudiments/classes/html/classxmldomnode.html xmldomnode class].

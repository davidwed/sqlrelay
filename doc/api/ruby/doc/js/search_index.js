var search_data = {"index":{"searchIndex":["sqlrconnection","sqlrcursor","affectedrows()","autocommitoff()","autocommiton()","begin()","bindformat()","cacheoff()","cachetofile()","clearbinds()","clientversion()","closeresultset()","colcount()","commit()","countbindvariables()","dbhostname()","dbipaddress()","dbversion()","debugoff()","debugon()","defineoutputbindblob()","defineoutputbindclob()","defineoutputbindcursor()","defineoutputbinddouble()","defineoutputbindinteger()","defineoutputbindstring()","dontgetcolumninfo()","endofresultset()","endsession()","errormessage()","errormessage()","errornumber()","errornumber()","executequery()","fetchfrombindcursor()","firstrowindex()","getcachefilename()","getclientinfo()","getcolumninfo()","getcolumnisautoincrement()","getcolumnisbinary()","getcolumnisnullable()","getcolumnispartofkey()","getcolumnisprimarykey()","getcolumnisunique()","getcolumnisunsigned()","getcolumniszerofilled()","getcolumnlength()","getcolumnlist()","getcolumnname()","getcolumnnames()","getcolumnprecision()","getcolumnscale()","getcolumntype()","getconnectionport()","getconnectionsocket()","getcurrentdatabase()","getdatabaselist()","getdebug()","getfield()","getfieldasdouble()","getfieldasinteger()","getfieldlength()","getlastinsertid()","getlongest()","getnullsasemptystrings()","getnullsasnils()","getoutputbindblob()","getoutputbindclob()","getoutputbindcursor()","getoutputbinddouble()","getoutputbindinteger()","getoutputbindlength()","getoutputbindstring()","getresultsetbuffersize()","getresultsetid()","getrow()","getrowhash()","getrowlengths()","getrowlengthshash()","gettablelist()","identify()","inputbind()","inputbindblob()","inputbindclob()","inputbinds()","lowercasecolumnnames()","mixedcasecolumnnames()","new()","new()","opencachedresultset()","ping()","preparefilequery()","preparequery()","preparequerywithlength()","resumecachedresultset()","resumeresultset()","resumesession()","rollback()","rowcount()","selectdatabase()","sendfilequery()","sendquery()","sendquerywithlength()","serverversion()","setcachettl()","setclientinfo()","setconnecttimeout()","setdebugfile()","setresultsetbuffersize()","substitution()","substitutions()","suspendresultset()","suspendsession()","totalrows()","uppercasecolumnnames()","validbind()","validatebinds()"],"longSearchIndex":["sqlrconnection","sqlrcursor","sqlrcursor#affectedrows()","sqlrconnection#autocommitoff()","sqlrconnection#autocommiton()","sqlrconnection#begin()","sqlrconnection#bindformat()","sqlrcursor#cacheoff()","sqlrcursor#cachetofile()","sqlrcursor#clearbinds()","sqlrconnection#clientversion()","sqlrcursor#closeresultset()","sqlrcursor#colcount()","sqlrconnection#commit()","sqlrcursor#countbindvariables()","sqlrconnection#dbhostname()","sqlrconnection#dbipaddress()","sqlrconnection#dbversion()","sqlrconnection#debugoff()","sqlrconnection#debugon()","sqlrcursor#defineoutputbindblob()","sqlrcursor#defineoutputbindclob()","sqlrcursor#defineoutputbindcursor()","sqlrcursor#defineoutputbinddouble()","sqlrcursor#defineoutputbindinteger()","sqlrcursor#defineoutputbindstring()","sqlrcursor#dontgetcolumninfo()","sqlrcursor#endofresultset()","sqlrconnection#endsession()","sqlrconnection#errormessage()","sqlrcursor#errormessage()","sqlrconnection#errornumber()","sqlrcursor#errornumber()","sqlrcursor#executequery()","sqlrcursor#fetchfrombindcursor()","sqlrcursor#firstrowindex()","sqlrcursor#getcachefilename()","sqlrconnection#getclientinfo()","sqlrcursor#getcolumninfo()","sqlrcursor#getcolumnisautoincrement()","sqlrcursor#getcolumnisbinary()","sqlrcursor#getcolumnisnullable()","sqlrcursor#getcolumnispartofkey()","sqlrcursor#getcolumnisprimarykey()","sqlrcursor#getcolumnisunique()","sqlrcursor#getcolumnisunsigned()","sqlrcursor#getcolumniszerofilled()","sqlrcursor#getcolumnlength()","sqlrcursor#getcolumnlist()","sqlrcursor#getcolumnname()","sqlrcursor#getcolumnnames()","sqlrcursor#getcolumnprecision()","sqlrcursor#getcolumnscale()","sqlrcursor#getcolumntype()","sqlrconnection#getconnectionport()","sqlrconnection#getconnectionsocket()","sqlrconnection#getcurrentdatabase()","sqlrcursor#getdatabaselist()","sqlrconnection#getdebug()","sqlrcursor#getfield()","sqlrcursor#getfieldasdouble()","sqlrcursor#getfieldasinteger()","sqlrcursor#getfieldlength()","sqlrconnection#getlastinsertid()","sqlrcursor#getlongest()","sqlrcursor#getnullsasemptystrings()","sqlrcursor#getnullsasnils()","sqlrcursor#getoutputbindblob()","sqlrcursor#getoutputbindclob()","sqlrcursor#getoutputbindcursor()","sqlrcursor#getoutputbinddouble()","sqlrcursor#getoutputbindinteger()","sqlrcursor#getoutputbindlength()","sqlrcursor#getoutputbindstring()","sqlrcursor#getresultsetbuffersize()","sqlrcursor#getresultsetid()","sqlrcursor#getrow()","sqlrcursor#getrowhash()","sqlrcursor#getrowlengths()","sqlrcursor#getrowlengthshash()","sqlrcursor#gettablelist()","sqlrconnection#identify()","sqlrcursor#inputbind()","sqlrcursor#inputbindblob()","sqlrcursor#inputbindclob()","sqlrcursor#inputbinds()","sqlrcursor#lowercasecolumnnames()","sqlrcursor#mixedcasecolumnnames()","sqlrconnection::new()","sqlrcursor::new()","sqlrcursor#opencachedresultset()","sqlrconnection#ping()","sqlrcursor#preparefilequery()","sqlrcursor#preparequery()","sqlrcursor#preparequerywithlength()","sqlrcursor#resumecachedresultset()","sqlrcursor#resumeresultset()","sqlrconnection#resumesession()","sqlrconnection#rollback()","sqlrcursor#rowcount()","sqlrconnection#selectdatabase()","sqlrcursor#sendfilequery()","sqlrcursor#sendquery()","sqlrcursor#sendquerywithlength()","sqlrconnection#serverversion()","sqlrcursor#setcachettl()","sqlrconnection#setclientinfo()","sqlrconnection#setconnecttimeout()","sqlrconnection#setdebugfile()","sqlrcursor#setresultsetbuffersize()","sqlrcursor#substitution()","sqlrcursor#substitutions()","sqlrcursor#suspendresultset()","sqlrconnection#suspendsession()","sqlrcursor#totalrows()","sqlrcursor#uppercasecolumnnames()","sqlrcursor#validbind()","sqlrcursor#validatebinds()"],"info":[["SQLRConnection","","SQLRConnection.html","",""],["SQLRCursor","","SQLRCursor.html","",""],["affectedRows","SQLRCursor","SQLRCursor.html#method-i-affectedRows","()","<p>Returns the number of rows that were updated, inserted or deleted by the\nquery.  Not all databases support …\n"],["autoCommitOff","SQLRConnection","SQLRConnection.html#method-i-autoCommitOff","()","<p>Instructs the database to wait for the client to tell it when to commit.\n"],["autoCommitOn","SQLRConnection","SQLRConnection.html#method-i-autoCommitOn","()","<p>Instructs the database to perform a commit after every successful query.\n"],["begin","SQLRConnection","SQLRConnection.html#method-i-begin","()","<p>Begins a transaction.  Returns true if the begin succeeded, false if it\nfailed.  If the database automatically …\n"],["bindFormat","SQLRConnection","SQLRConnection.html#method-i-bindFormat","()","<p>Returns a string representing the format of the bind variables used in the\ndb.\n"],["cacheOff","SQLRCursor","SQLRCursor.html#method-i-cacheOff","()","<p>Sets query caching off.\n"],["cacheToFile","SQLRCursor","SQLRCursor.html#method-i-cacheToFile","(p1)","<p>Sets query caching on.  Future queries will be cached to the file\n“filename”.\n<p>A default time-to-live …\n"],["clearBinds","SQLRCursor","SQLRCursor.html#method-i-clearBinds","()","<p>Clears all bind variables.\n"],["clientVersion","SQLRConnection","SQLRConnection.html#method-i-clientVersion","()","<p>Returns the version of the sqlrelay client software.\n"],["closeResultSet","SQLRCursor","SQLRCursor.html#method-i-closeResultSet","()","<p>Closes the current result set, if one is open.  Data that has been fetched\nalready is still available …\n"],["colCount","SQLRCursor","SQLRCursor.html#method-i-colCount","()","<p>Returns the number of columns in the current result set.\n"],["commit","SQLRConnection","SQLRConnection.html#method-i-commit","()","<p>Issues a commit.  Returns true if the commit succeeded, false if it failed.\n"],["countBindVariables","SQLRCursor","SQLRCursor.html#method-i-countBindVariables","()","<p>Parses the previously prepared query, counts the number of bind variables\ndefined in it and returns that …\n"],["dbHostName","SQLRConnection","SQLRConnection.html#method-i-dbHostName","()","<p>Returns the host name of the database\n"],["dbIpAddress","SQLRConnection","SQLRConnection.html#method-i-dbIpAddress","()","<p>Returns the ip address of the database\n"],["dbVersion","SQLRConnection","SQLRConnection.html#method-i-dbVersion","()","<p>Returns the version of the database\n"],["debugOff","SQLRConnection","SQLRConnection.html#method-i-debugOff","()","<p>Turns debugging off.\n"],["debugOn","SQLRConnection","SQLRConnection.html#method-i-debugOn","()","<p>Causes verbose debugging information to be sent to standard output. Another\nway to do this is to start …\n"],["defineOutputBindBlob","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindBlob","(p1)","<p>Defines a binary lob output bind variable\n"],["defineOutputBindClob","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindClob","(p1)","<p>Defines a character lob output bind variable\n"],["defineOutputBindCursor","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindCursor","(p1)","<p>Defines a cursor output bind variable\n"],["defineOutputBindDouble","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindDouble","(p1)","<p>Defines an decimal output bind variable.\n"],["defineOutputBindInteger","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindInteger","(p1)","<p>Defines an integer output bind variable.\n"],["defineOutputBindString","SQLRCursor","SQLRCursor.html#method-i-defineOutputBindString","(p1, p2)","<p>Defines a string output bind variable. “length” bytes will be reserved to\nstore the value. …\n"],["dontGetColumnInfo","SQLRCursor","SQLRCursor.html#method-i-dontGetColumnInfo","()","<p>Tells the server not to send any column info (names, types, sizes).  If you\ndon&#39;t need that info, …\n"],["endOfResultSet","SQLRCursor","SQLRCursor.html#method-i-endOfResultSet","()","<p>Returns 0 if part of the result set is still pending on the server and 1 if\nnot.  This function can only …\n"],["endSession","SQLRConnection","SQLRConnection.html#method-i-endSession","()","<p>Ends the session.\n"],["errorMessage","SQLRConnection","SQLRConnection.html#method-i-errorMessage","()","<p>If an operation failed and generated an error, the error message is\navailable here.  If there is no error …\n"],["errorMessage","SQLRCursor","SQLRCursor.html#method-i-errorMessage","()","<p>If a query failed and generated an error, the error message is available\nhere.  If the query succeeded …\n"],["errorNumber","SQLRConnection","SQLRConnection.html#method-i-errorNumber","()","<p>If an operation failed and generated an error, the error number is\navailable here.  If there is no error …\n"],["errorNumber","SQLRCursor","SQLRCursor.html#method-i-errorNumber","()","<p>If a query failed and generated an error, the error number is available\nhere.  If there is no error then …\n"],["executeQuery","SQLRCursor","SQLRCursor.html#method-i-executeQuery","()","<p>Execute the query that was previously prepared and bound.\n"],["fetchFromBindCursor","SQLRCursor","SQLRCursor.html#method-i-fetchFromBindCursor","()","<p>Fetch from a cursor that was returned as an output bind variable.\n"],["firstRowIndex","SQLRCursor","SQLRCursor.html#method-i-firstRowIndex","()","<p>Returns the index of the first buffered row.  This is useful when buffering\nonly part of the result set …\n"],["getCacheFileName","SQLRCursor","SQLRCursor.html#method-i-getCacheFileName","()","<p>Returns the name of the file containing the most recently cached result\nset.\n"],["getClientInfo","SQLRConnection","SQLRConnection.html#method-i-getClientInfo","()","<p>Returns the string that was set by setClientInfo().\n"],["getColumnInfo","SQLRCursor","SQLRCursor.html#method-i-getColumnInfo","()","<p>Tells the server to send column info.\n"],["getColumnIsAutoIncrement","SQLRCursor","SQLRCursor.html#method-i-getColumnIsAutoIncrement","(p1)","<p>Returns 1 if the specified column auto-increments and 0 otherwise. “col”\nmay be specified as …\n"],["getColumnIsBinary","SQLRCursor","SQLRCursor.html#method-i-getColumnIsBinary","(p1)","<p>Returns 1 if the specified column contains binary data and 0 otherwise.\n“col” may be specified …\n"],["getColumnIsNullable","SQLRCursor","SQLRCursor.html#method-i-getColumnIsNullable","(p1)","<p>Returns 1 if the specified column can contain nulls and 0 otherwise. “col”\nmay be specified …\n"],["getColumnIsPartOfKey","SQLRCursor","SQLRCursor.html#method-i-getColumnIsPartOfKey","(p1)","<p>Returns 1 if the specified column is part of a composite key and 0\notherwise.  “col” may be …\n"],["getColumnIsPrimaryKey","SQLRCursor","SQLRCursor.html#method-i-getColumnIsPrimaryKey","(p1)","<p>Returns 1 if the specified column is a primary key and 0 otherwise. “col”\nmay be specified …\n"],["getColumnIsUnique","SQLRCursor","SQLRCursor.html#method-i-getColumnIsUnique","(p1)","<p>Returns 1 if the specified column is unique and 0 otherwise.  “col” may be\nspecified as the …\n"],["getColumnIsUnsigned","SQLRCursor","SQLRCursor.html#method-i-getColumnIsUnsigned","(p1)","<p>Returns 1 if the specified column is an unsigned number and 0 otherwise.\n“col” may be specified …\n"],["getColumnIsZeroFilled","SQLRCursor","SQLRCursor.html#method-i-getColumnIsZeroFilled","(p1)","<p>Returns 1 if the specified column was created with the zero-fill flag and 0\notherwise.  “col” …\n"],["getColumnLength","SQLRCursor","SQLRCursor.html#method-i-getColumnLength","(p1)","<p>Returns the length of the specified column. “col” may be specified as the\ncolumn name or number. …\n"],["getColumnList","SQLRCursor","SQLRCursor.html#method-i-getColumnList","(p1, p2)","<p>Sends a query that returns a list of columns in the table specified by the\n“table” parameter …\n"],["getColumnName","SQLRCursor","SQLRCursor.html#method-i-getColumnName","(p1)","<p>Returns the name of the specified column.\n"],["getColumnNames","SQLRCursor","SQLRCursor.html#method-i-getColumnNames","()","<p>Returns an array of the column names of the current result set.\n"],["getColumnPrecision","SQLRCursor","SQLRCursor.html#method-i-getColumnPrecision","(p1)","<p>Returns the precision of the specified column.  Precision is the total\nnumber of digits in a number. …\n"],["getColumnScale","SQLRCursor","SQLRCursor.html#method-i-getColumnScale","(p1)","<p>Returns the scale of the specified column.  Scale is the total number of\ndigits to the right of the decimal …\n"],["getColumnType","SQLRCursor","SQLRCursor.html#method-i-getColumnType","(p1)","<p>Returns the type of the specified column. “col” may be specified as the\ncolumn name or number. …\n"],["getConnectionPort","SQLRConnection","SQLRConnection.html#method-i-getConnectionPort","()","<p>Returns the inet port that the connection is communicating over.  This\nparameter may be passed to another …\n"],["getConnectionSocket","SQLRConnection","SQLRConnection.html#method-i-getConnectionSocket","()","<p>Returns the unix socket that the connection is communicating over.  This\nparameter may be passed to another …\n"],["getCurrentDatabase","SQLRConnection","SQLRConnection.html#method-i-getCurrentDatabase","()","<p>Returns the database/schema that is currently in use.\n"],["getDatabaseList","SQLRCursor","SQLRCursor.html#method-i-getDatabaseList","(p1)","<p>Sends a query that returns a list of databases/schemas matching “wild”. If\nwild is empty or …\n"],["getDebug","SQLRConnection","SQLRConnection.html#method-i-getDebug","()","<p>Returns 0 if debugging is off and 1 if debugging is on.\n"],["getField","SQLRCursor","SQLRCursor.html#method-i-getField","(p1, p2)","<p>Returns the specified field as a string.  “col” may be specified as the \ncolumn name or number. …\n"],["getFieldAsDouble","SQLRCursor","SQLRCursor.html#method-i-getFieldAsDouble","(p1, p2)","<p>Returns the specified field as an decimal.  “col” may be specified as the\ncolumn name or number. …\n"],["getFieldAsInteger","SQLRCursor","SQLRCursor.html#method-i-getFieldAsInteger","(p1, p2)","<p>Returns the specified field as an integer.  “col” may be specified as the\ncolumn name or number. …\n"],["getFieldLength","SQLRCursor","SQLRCursor.html#method-i-getFieldLength","(p1, p2)","<p>Returns the length of the specified row and column.  “col” may be specified\nas the column name …\n"],["getLastInsertId","SQLRConnection","SQLRConnection.html#method-i-getLastInsertId","()","<p>Returns the value of the autoincrement column for the last insert\n"],["getLongest","SQLRCursor","SQLRCursor.html#method-i-getLongest","(p1)","<p>Returns the length of the longest field in the specified column. “col” may\nbe specified as …\n"],["getNullsAsEmptyStrings","SQLRCursor","SQLRCursor.html#method-i-getNullsAsEmptyStrings","()","<p>Tells the connection to return NULL fields and output bind variables as\nempty strings.  This is the default. …\n"],["getNullsAsNils","SQLRCursor","SQLRCursor.html#method-i-getNullsAsNils","()","<p>Tells the connection to return NULL fields and output bind variables as\nnil&#39;s.\n"],["getOutputBindBlob","SQLRCursor","SQLRCursor.html#method-i-getOutputBindBlob","(p1)","<p>Get the value stored in a previously defined binary lob output bind\nvariable.\n"],["getOutputBindClob","SQLRCursor","SQLRCursor.html#method-i-getOutputBindClob","(p1)","<p>Get the value stored in a previously defined character lob output bind\nvariable.\n"],["getOutputBindCursor","SQLRCursor","SQLRCursor.html#method-i-getOutputBindCursor","(p1)","<p>Get the cursor associated with a previously defined output bind variable.\n"],["getOutputBindDouble","SQLRCursor","SQLRCursor.html#method-i-getOutputBindDouble","(p1)","<p>Get the value stored in a previously defined decimal output bind variable.\n"],["getOutputBindInteger","SQLRCursor","SQLRCursor.html#method-i-getOutputBindInteger","(p1)","<p>Get the value stored in a previously defined integer output bind variable.\n"],["getOutputBindLength","SQLRCursor","SQLRCursor.html#method-i-getOutputBindLength","(p1)","<p>Get the length of the value stored in a previously defined output bind\nvariable.\n"],["getOutputBindString","SQLRCursor","SQLRCursor.html#method-i-getOutputBindString","(p1)","<p>Get the value stored in a previously defined string output bind variable.\n"],["getResultSetBufferSize","SQLRCursor","SQLRCursor.html#method-i-getResultSetBufferSize","()","<p>Returns the number of result set rows that will be buffered at a time or 0\nfor the entire result set. …\n"],["getResultSetId","SQLRCursor","SQLRCursor.html#method-i-getResultSetId","()","<p>Returns the internal ID of this result set.  This parameter may be passed\nto another statement for use …\n"],["getRow","SQLRCursor","SQLRCursor.html#method-i-getRow","(p1)","<p>Returns an array of the values of the fields in the specified row.\n"],["getRowHash","SQLRCursor","SQLRCursor.html#method-i-getRowHash","(p1)","<p>Returns a hash of the values of the fields in the specified row.\n"],["getRowLengths","SQLRCursor","SQLRCursor.html#method-i-getRowLengths","(p1)","<p>Returns an array of the lengths of the fields in the specified row.\n"],["getRowLengthsHash","SQLRCursor","SQLRCursor.html#method-i-getRowLengthsHash","(p1)","<p>Returns a hash of the lengths of the fields in the specified row.\n"],["getTableList","SQLRCursor","SQLRCursor.html#method-i-getTableList","(p1)","<p>Sends a query that returns a list of tables matching “wild”.  If wild is\nempty or nil then …\n"],["identify","SQLRConnection","SQLRConnection.html#method-i-identify","()","<p>Returns the type of database: oracle, postgresql, mysql, etc.\n"],["inputBind","SQLRCursor","SQLRCursor.html#method-i-inputBind","(p1, p2, p3 = v3, p4 = v4)","<p>Defines am input bind variable.  The value may be a string, integer or\ndecimal.  If it is a decimal then …\n"],["inputBindBlob","SQLRCursor","SQLRCursor.html#method-i-inputBindBlob","(p1, p2, p3)","<p>Defines a binary lob input bind variable.\n"],["inputBindClob","SQLRCursor","SQLRCursor.html#method-i-inputBindClob","(p1, p2, p3)","<p>Defines a character lob input bind variable.\n"],["inputBinds","SQLRCursor","SQLRCursor.html#method-i-inputBinds","(p1, p2, p3 = v3, p4 = v4)","<p>Defines an array of input bind variables.  The values may be strings,\nintegers or decimals.  If they …\n"],["lowerCaseColumnNames","SQLRCursor","SQLRCursor.html#method-i-lowerCaseColumnNames","()","<p>Columns names are converted to lower case.\n"],["mixedCaseColumnNames","SQLRCursor","SQLRCursor.html#method-i-mixedCaseColumnNames","()","<p>Columns names are returned in the same case as they are defined in the\ndatabase.  This is the default. …\n"],["new","SQLRConnection","SQLRConnection.html#method-c-new","(p1, p2, p3, p4, p5, p6, p7)","<p>Initiates a connection to “host” on “port” or to the unix “socket” on the …\n"],["new","SQLRCursor","SQLRCursor.html#method-c-new","(p1)","<p>Creates a cursor to run queries and fetch result sets using connection\n“connection”\n"],["openCachedResultSet","SQLRCursor","SQLRCursor.html#method-i-openCachedResultSet","(p1)","<p>Opens a cached result set.  Returns 1 on success and 0 on failure.\n"],["ping","SQLRConnection","SQLRConnection.html#method-i-ping","()","<p>Returns 1 if the database is up and 0 if it&#39;s down.\n"],["prepareFileQuery","SQLRCursor","SQLRCursor.html#method-i-prepareFileQuery","(p1, p2)","<p>Prepare to execute the contents of “path”/“filename”.\n"],["prepareQuery","SQLRCursor","SQLRCursor.html#method-i-prepareQuery","(p1)","<p>Prepare to execute “query”.\n"],["prepareQueryWithLength","SQLRCursor","SQLRCursor.html#method-i-prepareQueryWithLength","(p1, p2)","<p>Prepare to execute “query” with length “length”.  This function must be\nused if the …\n"],["resumeCachedResultSet","SQLRCursor","SQLRCursor.html#method-i-resumeCachedResultSet","(p1, p2)","<p>Resumes a result set previously left open using suspendSession() and\ncontinues caching the result set …\n"],["resumeResultSet","SQLRCursor","SQLRCursor.html#method-i-resumeResultSet","(p1)","<p>Resumes a result set previously left open using suspendSession(). Returns 1\non success and 0 on failure. …\n"],["resumeSession","SQLRConnection","SQLRConnection.html#method-i-resumeSession","(p1, p2)","<p>Resumes a session previously left open using sqlrcon_suspendSession().\nReturns 1 on success and 0 on …\n"],["rollback","SQLRConnection","SQLRConnection.html#method-i-rollback","()","<p>Issues a rollback.  Returns true if the rollback succeeded, false if it\nfailed.\n"],["rowCount","SQLRCursor","SQLRCursor.html#method-i-rowCount","()","<p>Returns the number of rows in the current result set.\n"],["selectDatabase","SQLRConnection","SQLRConnection.html#method-i-selectDatabase","(p1)","<p>Sets the current database/schema to “database”\n"],["sendFileQuery","SQLRCursor","SQLRCursor.html#method-i-sendFileQuery","(p1, p2)","<p>Sends the query in file “path”/“filename” and gets a result set.\n"],["sendQuery","SQLRCursor","SQLRCursor.html#method-i-sendQuery","(p1)","<p>Sends “query” directly and gets a result set.\n"],["sendQueryWithLength","SQLRCursor","SQLRCursor.html#method-i-sendQueryWithLength","(p1, p2)","<p>Sends “query” with length “length” directly and gets a result set. This\nfunction …\n"],["serverVersion","SQLRConnection","SQLRConnection.html#method-i-serverVersion","()","<p>Returns the version of the sqlrelay server software.\n"],["setCacheTtl","SQLRCursor","SQLRCursor.html#method-i-setCacheTtl","(p1)","<p>Sets the time-to-live for cached result sets. The sqlr-cachemanger will\nremove each cached result set …\n"],["setClientInfo","SQLRConnection","SQLRConnection.html#method-i-setClientInfo","(p1)","<p>Allows you to set a string that will be passed to the server and ultimately\nincluded in server-side logging …\n"],["setConnectTimeout","SQLRConnection","SQLRConnection.html#method-i-setConnectTimeout","(p1, p2)","<p>Sets the server connect timeout in seconds and milliseconds.  Setting\neither parameter to -1 disables …\n"],["setDebugFile","SQLRConnection","SQLRConnection.html#method-i-setDebugFile","(p1)","<p>Allows you to specify a file to write debug to. Setting “filename” to NULL\nor an empty string …\n"],["setResultSetBufferSize","SQLRCursor","SQLRCursor.html#method-i-setResultSetBufferSize","(p1)","<p>Sets the number of rows of the result set to buffer at a time. 0 (the\ndefault) means buffer the entire …\n"],["substitution","SQLRCursor","SQLRCursor.html#method-i-substitution","(p1, p2, p3 = v3, p4 = v4)","<p>Defines a substitution variable.  The value may be a string, integer or\ndecimal.  If it is a decimal …\n"],["substitutions","SQLRCursor","SQLRCursor.html#method-i-substitutions","(p1, p2, p3 = v3, p4 = v4)","<p>Defines an array of substitution variables.  The values may be strings,\nintegers or decimals.  If they …\n"],["suspendResultSet","SQLRCursor","SQLRCursor.html#method-i-suspendResultSet","()","<p>Tells the server to leave this result set open when the connection calls\nsuspendSession() so that another …\n"],["suspendSession","SQLRConnection","SQLRConnection.html#method-i-suspendSession","()","<p>Disconnects this connection from the current session but leaves the session\nopen so that another connection …\n"],["totalRows","SQLRCursor","SQLRCursor.html#method-i-totalRows","()","<p>Returns the total number of rows that will be returned in the result set.\nNot all databases support this …\n"],["upperCaseColumnNames","SQLRCursor","SQLRCursor.html#method-i-upperCaseColumnNames","()","<p>Columns names are converted to upper case.\n"],["validBind","SQLRCursor","SQLRCursor.html#method-i-validBind","(p1)","<p>Returns true if “variable” was a valid bind variable of the query.\n"],["validateBinds","SQLRCursor","SQLRCursor.html#method-i-validateBinds","()","<p>If you are binding to any variables that might not actually be in your\nquery, call this to ensure that …\n"]]}}
